{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/home/user/Documents/StandByAssist/frontend/node_modules/@react-navigation/drawer/src/views/Overlay.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from 'react-native-reanimated';\nvar interpolate = Animated.interpolate,\n    cond = Animated.cond,\n    greaterThan = Animated.greaterThan;\nvar PROGRESS_EPSILON = 0.05;\nvar Overlay = React.forwardRef(function Overlay(_ref, ref) {\n  var progress = _ref.progress,\n      style = _ref.style,\n      props = _objectWithoutProperties(_ref, [\"progress\", \"style\"]);\n\n  var animatedStyle = {\n    opacity: interpolate(progress, {\n      inputRange: [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1]\n    }),\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1)\n  };\n  return React.createElement(Animated.View, _extends({}, props, {\n    ref: ref,\n    style: [styles.overlay, animatedStyle, style],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }));\n});\nvar styles = StyleSheet.create({\n  overlay: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    backgroundColor: 'rgba(0, 0, 0, 0.5)'\n  }, Platform.select({\n    web: {\n      WebkitTapHighlightColor: 'transparent'\n    },\n    default: {}\n  }))\n});\nexport default Overlay;","map":{"version":3,"sources":["/home/user/Documents/StandByAssist/frontend/node_modules/@react-navigation/drawer/src/views/Overlay.tsx"],"names":["React","Animated","interpolate","cond","greaterThan","PROGRESS_EPSILON","Overlay","forwardRef","ref","progress","style","props","animatedStyle","opacity","inputRange","outputRange","zIndex","styles","overlay","StyleSheet","create","absoluteFillObject","backgroundColor","Platform","select","web","WebkitTapHighlightColor","default"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,OAAOC,QAAP,MAAqB,yBAArB;IAEQC,W,GAAmCD,Q,CAAnCC,W;IAAaC,I,GAAsBF,Q,CAAtBE,I;IAAMC,W,GAAgBH,Q,CAAhBG,W;AAE3B,IAAMC,gBAAgB,GAAG,IAAzB;AAMA,IAAMC,OAAO,GAAGN,KAAK,CAACO,UAAN,CAAiB,SAASD,OAAT,OAE/BE,GAF+B,EAG/B;AAAA,MAFEC,QAEF,QAFEA,QAEF;AAAA,MAFYC,KAEZ,QAFYA,KAEZ;AAAA,MAFsBC,KAEtB;;AACA,MAAMC,aAAa,GAAG;AACpBC,IAAAA,OAAO,EAAEX,WAAW,CAACO,QAAD,EAAW;AAC7BK,MAAAA,UAAU,EAAE,CAACT,gBAAD,EAAmB,CAAnB,CADiB;AAE7BU,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFgB,KAAX,CADA;AAQpBC,IAAAA,MAAM,EAAEb,IAAI,CAACC,WAAW,CAACK,QAAD,EAAWJ,gBAAX,CAAZ,EAA0C,CAA1C,EAA6C,CAAC,CAA9C;AARQ,GAAtB;AAWA,SACE,oBAAC,QAAD,CAAU,IAAV,eACMM,KADN;AAEE,IAAA,GAAG,EAAEH,GAFP;AAGE,IAAA,KAAK,EAAE,CAACS,MAAM,CAACC,OAAR,EAAiBN,aAAjB,EAAgCF,KAAhC,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAOD,CAtBe,CAAhB;AAwBA,IAAMO,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,OAAO,oBACFC,UAAU,CAACE,kBADT;AAELC,IAAAA,eAAe,EAAE;AAFZ,KAGFC,QAAQ,CAACC,MAAT,CAAgB;AACjBC,IAAAA,GAAG,EAAE;AAEHC,MAAAA,uBAAuB,EAAE;AAFtB,KADY;AAKjBC,IAAAA,OAAO,EAAE;AALQ,GAAhB,CAHE;AADwB,CAAlB,CAAf;AAcA,eAAerB,OAAf","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nconst { interpolate, cond, greaterThan } = Animated;\n\nconst PROGRESS_EPSILON = 0.05;\n\ntype Props = React.ComponentProps<typeof Animated.View> & {\n  progress: Animated.Node<number>;\n};\n\nconst Overlay = React.forwardRef(function Overlay(\n  { progress, style, ...props }: Props,\n  ref: React.Ref<Animated.View>\n) {\n  const animatedStyle = {\n    opacity: interpolate(progress, {\n      inputRange: [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1],\n    }),\n    // We don't want the user to be able to press through the overlay when drawer is open\n    // One approach is to adjust the pointerEvents based on the progress\n    // But we can also send the overlay behind the screen, which works, and is much less code\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1),\n  };\n\n  return (\n    <Animated.View\n      {...props}\n      ref={ref}\n      style={[styles.overlay, animatedStyle, style]}\n    />\n  );\n});\n\nconst styles = StyleSheet.create({\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    ...Platform.select({\n      web: {\n        // Disable touch highlight on mobile Safari.\n        WebkitTapHighlightColor: 'transparent',\n      },\n      default: {},\n    }),\n  },\n});\n\nexport default Overlay;\n"]},"metadata":{},"sourceType":"module"}
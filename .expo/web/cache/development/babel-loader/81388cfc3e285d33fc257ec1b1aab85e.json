{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/home/user/Documents/StandByAssist/frontend/node_modules/react-native-web/src/exports/Touchable/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport AccessibilityUtil from \"../../modules/AccessibilityUtil\";\nimport BoundingDimensions from \"./BoundingDimensions\";\nimport findNodeHandle from \"../findNodeHandle\";\nimport normalizeColor from 'normalize-css-color';\nimport Position from \"./Position\";\nimport React from 'react';\nimport TouchEventUtils from 'fbjs/lib/TouchEventUtils';\nimport UIManager from \"../UIManager\";\nimport View from \"../View\";\nvar States = {\n  NOT_RESPONDER: 'NOT_RESPONDER',\n  RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN',\n  RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT',\n  RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN',\n  RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT',\n  RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',\n  ERROR: 'ERROR'\n};\nvar IsActive = {\n  RESPONDER_ACTIVE_PRESS_OUT: true,\n  RESPONDER_ACTIVE_PRESS_IN: true\n};\nvar IsPressingIn = {\n  RESPONDER_INACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n};\nvar IsLongPressingIn = {\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n};\nvar Signals = {\n  DELAY: 'DELAY',\n  RESPONDER_GRANT: 'RESPONDER_GRANT',\n  RESPONDER_RELEASE: 'RESPONDER_RELEASE',\n  RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',\n  ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',\n  LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',\n  LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED'\n};\nvar Transitions = {\n  NOT_RESPONDER: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.ERROR,\n    RESPONDER_TERMINATED: States.ERROR,\n    ENTER_PRESS_RECT: States.ERROR,\n    LEAVE_PRESS_RECT: States.ERROR,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  error: {\n    DELAY: States.NOT_RESPONDER,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.NOT_RESPONDER,\n    LEAVE_PRESS_RECT: States.NOT_RESPONDER,\n    LONG_PRESS_DETECTED: States.NOT_RESPONDER\n  }\n};\nvar HIGHLIGHT_DELAY_MS = 130;\nvar PRESS_EXPAND_PX = 20;\nvar LONG_PRESS_THRESHOLD = 500;\nvar LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;\nvar LONG_PRESS_ALLOWED_MOVEMENT = 10;\nvar TouchableMixin = {\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    this._touchableNode = findNodeHandle(this);\n\n    if (this._touchableNode && this._touchableNode.addEventListener) {\n      this._touchableBlurListener = function (e) {\n        if (_this._isTouchableKeyboardActive) {\n          if (_this.state.touchable.touchState && _this.state.touchable.touchState !== States.NOT_RESPONDER) {\n            _this.touchableHandleResponderTerminate({\n              nativeEvent: e\n            });\n          }\n\n          _this._isTouchableKeyboardActive = false;\n        }\n      };\n\n      this._touchableNode.addEventListener('blur', this._touchableBlurListener);\n    }\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    if (this._touchableNode && this._touchableNode.addEventListener) {\n      this._touchableNode.removeEventListener('blur', this._touchableBlurListener);\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n  },\n  touchableGetInitialState: function touchableGetInitialState() {\n    return {\n      touchable: {\n        touchState: undefined,\n        responderID: null\n      }\n    };\n  },\n  touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {\n    return !this.props.rejectResponderTermination;\n  },\n  touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {\n    return !this.props.disabled;\n  },\n  touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {\n    return true;\n  },\n  touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {\n    var dispatchID = e.currentTarget;\n    e.persist();\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    this.pressOutDelayTimeout = null;\n    this.state.touchable.touchState = States.NOT_RESPONDER;\n    this.state.touchable.responderID = dispatchID;\n\n    this._receiveSignal(Signals.RESPONDER_GRANT, e);\n\n    var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;\n    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;\n\n    if (delayMS !== 0) {\n      this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);\n    } else {\n      this.state.touchable.positionOnActivate = null;\n\n      this._handleDelay(e);\n    }\n\n    var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;\n    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;\n    this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);\n  },\n  touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {\n    this._receiveSignal(Signals.RESPONDER_RELEASE, e);\n  },\n  touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {\n    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);\n  },\n  touchableHandleResponderMove: function touchableHandleResponderMove(e) {\n    if (this.state.touchable.touchState === States.RESPONDER_INACTIVE_PRESS_IN) {\n      return;\n    }\n\n    if (!this.state.touchable.positionOnActivate) {\n      return;\n    }\n\n    var positionOnActivate = this.state.touchable.positionOnActivate;\n    var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;\n    var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {\n      left: PRESS_EXPAND_PX,\n      right: PRESS_EXPAND_PX,\n      top: PRESS_EXPAND_PX,\n      bottom: PRESS_EXPAND_PX\n    };\n    var pressExpandLeft = pressRectOffset.left;\n    var pressExpandTop = pressRectOffset.top;\n    var pressExpandRight = pressRectOffset.right;\n    var pressExpandBottom = pressRectOffset.bottom;\n    var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;\n\n    if (hitSlop) {\n      pressExpandLeft += hitSlop.left;\n      pressExpandTop += hitSlop.top;\n      pressExpandRight += hitSlop.right;\n      pressExpandBottom += hitSlop.bottom;\n    }\n\n    var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n\n    if (this.pressInLocation) {\n      var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);\n\n      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {\n        this._cancelLongPressDelayTimeout();\n      }\n    }\n\n    var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;\n\n    if (isTouchWithinActive) {\n      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);\n\n      var curState = this.state.touchable.touchState;\n\n      if (curState === States.RESPONDER_INACTIVE_PRESS_IN) {\n        this._cancelLongPressDelayTimeout();\n      }\n    } else {\n      this._cancelLongPressDelayTimeout();\n\n      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);\n    }\n  },\n  _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {\n    var tag = this.state.touchable.responderID;\n\n    if (tag == null) {\n      return;\n    }\n\n    UIManager.measure(tag, this._handleQueryLayout);\n  },\n  _handleQueryLayout: function _handleQueryLayout(x, y, width, height, globalX, globalY) {\n    if (!x && !y && !width && !height && !globalX && !globalY) {\n      return;\n    }\n\n    this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);\n    this.state.touchable.dimensionsOnActivate && BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);\n    this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);\n    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(width, height);\n  },\n  _handleDelay: function _handleDelay(e) {\n    this.touchableDelayTimeout = null;\n\n    this._receiveSignal(Signals.DELAY, e);\n  },\n  _handleLongDelay: function _handleLongDelay(e) {\n    this.longPressDelayTimeout = null;\n    var curState = this.state.touchable.touchState;\n\n    if (curState !== States.RESPONDER_ACTIVE_PRESS_IN && curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {\n      console.error('Attempted to transition from state `' + curState + '` to `' + States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' + 'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');\n    } else {\n      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);\n    }\n  },\n  _receiveSignal: function _receiveSignal(signal, e) {\n    var responderID = this.state.touchable.responderID;\n    var curState = this.state.touchable.touchState;\n    var nextState = Transitions[curState] && Transitions[curState][signal];\n\n    if (!responderID && signal === Signals.RESPONDER_RELEASE) {\n      return;\n    }\n\n    if (!nextState) {\n      throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + responderID + '`');\n    }\n\n    if (nextState === States.ERROR) {\n      throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + responderID + '`');\n    }\n\n    if (curState !== nextState) {\n      this._performSideEffectsForTransition(curState, nextState, signal, e);\n\n      this.state.touchable.touchState = nextState;\n    }\n  },\n  _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.longPressDelayTimeout = null;\n  },\n  _isHighlight: function _isHighlight(state) {\n    return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;\n  },\n  _savePressInLocation: function _savePressInLocation(e) {\n    var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n    this.pressInLocation = {\n      pageX: pageX,\n      pageY: pageY,\n\n      get locationX() {\n        return touch && touch.locationX;\n      },\n\n      get locationY() {\n        return touch && touch.locationY;\n      }\n\n    };\n  },\n  _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {\n    var deltaX = aX - bX;\n    var deltaY = aY - bY;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  },\n  _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {\n    var curIsHighlight = this._isHighlight(curState);\n\n    var newIsHighlight = this._isHighlight(nextState);\n\n    var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;\n\n    if (isFinalSignal) {\n      this._cancelLongPressDelayTimeout();\n    }\n\n    if (!IsActive[curState] && IsActive[nextState]) {\n      this._remeasureMetricsOnActivation();\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {\n      this.touchableHandleLongPress && this.touchableHandleLongPress(e);\n    }\n\n    if (newIsHighlight && !curIsHighlight) {\n      this._startHighlight(e);\n    } else if (!newIsHighlight && curIsHighlight) {\n      this._endHighlight(e);\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {\n      var hasLongPressHandler = !!this.props.onLongPress;\n      var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());\n      var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;\n\n      if (shouldInvokePress && this.touchableHandlePress) {\n        if (!newIsHighlight && !curIsHighlight) {\n          this._startHighlight(e);\n\n          this._endHighlight(e);\n        }\n\n        this.touchableHandlePress(e);\n      }\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.touchableDelayTimeout = null;\n  },\n  _startHighlight: function _startHighlight(e) {\n    this._savePressInLocation(e);\n\n    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);\n  },\n  _endHighlight: function _endHighlight(e) {\n    var _this2 = this;\n\n    if (this.touchableHandleActivePressOut) {\n      if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {\n        this.pressOutDelayTimeout = setTimeout(function () {\n          _this2.touchableHandleActivePressOut(e);\n        }, this.touchableGetPressOutDelayMS());\n      } else {\n        this.touchableHandleActivePressOut(e);\n      }\n    }\n  },\n  touchableHandleKeyEvent: function touchableHandleKeyEvent(e) {\n    var ENTER = 13;\n    var SPACE = 32;\n    var type = e.type,\n        which = e.which;\n\n    if (which === ENTER || which === SPACE) {\n      if (type === 'keydown') {\n        if (!this._isTouchableKeyboardActive) {\n          if (!this.state.touchable.touchState || this.state.touchable.touchState === States.NOT_RESPONDER) {\n            this.touchableHandleResponderGrant(e);\n            this._isTouchableKeyboardActive = true;\n          }\n        }\n      } else if (type === 'keyup') {\n        if (this._isTouchableKeyboardActive) {\n          if (this.state.touchable.touchState && this.state.touchable.touchState !== States.NOT_RESPONDER) {\n            this.touchableHandleResponderRelease(e);\n            this._isTouchableKeyboardActive = false;\n          }\n        }\n      }\n\n      e.stopPropagation();\n\n      if (!(which === ENTER && AccessibilityUtil.propsToAriaRole(this.props) === 'link')) {\n        e.preventDefault();\n      }\n    }\n  }\n};\nvar Touchable = {\n  Mixin: TouchableMixin,\n  TOUCH_TARGET_DEBUG: false,\n  renderDebugView: function renderDebugView(_ref) {\n    var color = _ref.color,\n        hitSlop = _ref.hitSlop;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!Touchable.TOUCH_TARGET_DEBUG) {\n        return null;\n      }\n\n      var debugHitSlopStyle = {};\n      hitSlop = hitSlop || {\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0\n      };\n\n      for (var key in hitSlop) {\n        debugHitSlopStyle[key] = -hitSlop[key];\n      }\n\n      var hexColor = '#' + ('00000000' + normalizeColor(color).toString(16)).substr(-8);\n      return React.createElement(View, {\n        pointerEvents: \"none\",\n        style: _objectSpread({\n          position: 'absolute',\n          borderColor: hexColor.slice(0, -2) + '55',\n          borderWidth: 1,\n          borderStyle: 'dashed',\n          backgroundColor: hexColor.slice(0, -2) + '0F'\n        }, debugHitSlopStyle),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 853,\n          columnNumber: 9\n        }\n      });\n    }\n  }\n};\nexport default Touchable;","map":{"version":3,"sources":["/home/user/Documents/StandByAssist/frontend/node_modules/react-native-web/src/exports/Touchable/index.js"],"names":["AccessibilityUtil","BoundingDimensions","findNodeHandle","normalizeColor","Position","React","TouchEventUtils","UIManager","View","States","NOT_RESPONDER","RESPONDER_INACTIVE_PRESS_IN","RESPONDER_INACTIVE_PRESS_OUT","RESPONDER_ACTIVE_PRESS_IN","RESPONDER_ACTIVE_PRESS_OUT","RESPONDER_ACTIVE_LONG_PRESS_IN","RESPONDER_ACTIVE_LONG_PRESS_OUT","ERROR","IsActive","IsPressingIn","IsLongPressingIn","Signals","DELAY","RESPONDER_GRANT","RESPONDER_RELEASE","RESPONDER_TERMINATED","ENTER_PRESS_RECT","LEAVE_PRESS_RECT","LONG_PRESS_DETECTED","Transitions","error","HIGHLIGHT_DELAY_MS","PRESS_EXPAND_PX","LONG_PRESS_THRESHOLD","LONG_PRESS_DELAY_MS","LONG_PRESS_ALLOWED_MOVEMENT","TouchableMixin","componentDidMount","_touchableNode","addEventListener","_touchableBlurListener","e","_isTouchableKeyboardActive","state","touchable","touchState","touchableHandleResponderTerminate","nativeEvent","componentWillUnmount","removeEventListener","touchableDelayTimeout","clearTimeout","longPressDelayTimeout","pressOutDelayTimeout","touchableGetInitialState","undefined","responderID","touchableHandleResponderTerminationRequest","props","rejectResponderTermination","touchableHandleStartShouldSetResponder","disabled","touchableLongPressCancelsPress","touchableHandleResponderGrant","dispatchID","currentTarget","persist","_receiveSignal","delayMS","touchableGetHighlightDelayMS","Math","max","isNaN","setTimeout","_handleDelay","bind","positionOnActivate","longDelayMS","touchableGetLongPressDelayMS","_handleLongDelay","touchableHandleResponderRelease","touchableHandleResponderMove","dimensionsOnActivate","pressRectOffset","touchableGetPressRectOffset","left","right","top","bottom","pressExpandLeft","pressExpandTop","pressExpandRight","pressExpandBottom","hitSlop","touchableGetHitSlop","touch","extractSingleTouch","pageX","pageY","pressInLocation","movedDistance","_getDistanceBetweenPoints","_cancelLongPressDelayTimeout","isTouchWithinActive","width","height","curState","_remeasureMetricsOnActivation","tag","measure","_handleQueryLayout","x","y","globalX","globalY","release","getPooled","console","signal","nextState","Error","_performSideEffectsForTransition","_isHighlight","_savePressInLocation","locationX","locationY","aX","aY","bX","bY","deltaX","deltaY","sqrt","curIsHighlight","newIsHighlight","isFinalSignal","touchableHandleLongPress","_startHighlight","_endHighlight","hasLongPressHandler","onLongPress","pressIsLongButStillCallOnPress","shouldInvokePress","touchableHandlePress","touchableHandleActivePressIn","touchableHandleActivePressOut","touchableGetPressOutDelayMS","touchableHandleKeyEvent","ENTER","SPACE","type","which","stopPropagation","propsToAriaRole","preventDefault","Touchable","Mixin","TOUCH_TARGET_DEBUG","renderDebugView","color","process","env","NODE_ENV","debugHitSlopStyle","key","hexColor","toString","substr","position","borderColor","slice","borderWidth","borderStyle","backgroundColor"],"mappings":";;;;;;;AAYA,OAAOA,iBAAP;AACA,OAAOC,kBAAP;AACA,OAAOC,cAAP;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,OAAOC,QAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,SAAP;AACA,OAAOC,IAAP;AA4FA,IAAMC,MAAM,GAAG;AACbC,EAAAA,aAAa,EAAE,eADF;AAEbC,EAAAA,2BAA2B,EAAE,6BAFhB;AAGbC,EAAAA,4BAA4B,EAAE,8BAHjB;AAIbC,EAAAA,yBAAyB,EAAE,2BAJd;AAKbC,EAAAA,0BAA0B,EAAE,4BALf;AAMbC,EAAAA,8BAA8B,EAAE,gCANnB;AAObC,EAAAA,+BAA+B,EAAE,iCAPpB;AAQbC,EAAAA,KAAK,EAAE;AARM,CAAf;AAcA,IAAMC,QAAQ,GAAG;AACfJ,EAAAA,0BAA0B,EAAE,IADb;AAEfD,EAAAA,yBAAyB,EAAE;AAFZ,CAAjB;AASA,IAAMM,YAAY,GAAG;AACnBR,EAAAA,2BAA2B,EAAE,IADV;AAEnBE,EAAAA,yBAAyB,EAAE,IAFR;AAGnBE,EAAAA,8BAA8B,EAAE;AAHb,CAArB;AAMA,IAAMK,gBAAgB,GAAG;AACvBL,EAAAA,8BAA8B,EAAE;AADT,CAAzB;AAOA,IAAMM,OAAO,GAAG;AACdC,EAAAA,KAAK,EAAE,OADO;AAEdC,EAAAA,eAAe,EAAE,iBAFH;AAGdC,EAAAA,iBAAiB,EAAE,mBAHL;AAIdC,EAAAA,oBAAoB,EAAE,sBAJR;AAKdC,EAAAA,gBAAgB,EAAE,kBALJ;AAMdC,EAAAA,gBAAgB,EAAE,kBANJ;AAOdC,EAAAA,mBAAmB,EAAE;AAPP,CAAhB;AAaA,IAAMC,WAAW,GAAG;AAClBnB,EAAAA,aAAa,EAAE;AACbY,IAAAA,KAAK,EAAEb,MAAM,CAACQ,KADD;AAEbM,IAAAA,eAAe,EAAEd,MAAM,CAACE,2BAFX;AAGba,IAAAA,iBAAiB,EAAEf,MAAM,CAACQ,KAHb;AAIbQ,IAAAA,oBAAoB,EAAEhB,MAAM,CAACQ,KAJhB;AAKbS,IAAAA,gBAAgB,EAAEjB,MAAM,CAACQ,KALZ;AAMbU,IAAAA,gBAAgB,EAAElB,MAAM,CAACQ,KANZ;AAObW,IAAAA,mBAAmB,EAAEnB,MAAM,CAACQ;AAPf,GADG;AAUlBN,EAAAA,2BAA2B,EAAE;AAC3BW,IAAAA,KAAK,EAAEb,MAAM,CAACI,yBADa;AAE3BU,IAAAA,eAAe,EAAEd,MAAM,CAACQ,KAFG;AAG3BO,IAAAA,iBAAiB,EAAEf,MAAM,CAACC,aAHC;AAI3Be,IAAAA,oBAAoB,EAAEhB,MAAM,CAACC,aAJF;AAK3BgB,IAAAA,gBAAgB,EAAEjB,MAAM,CAACE,2BALE;AAM3BgB,IAAAA,gBAAgB,EAAElB,MAAM,CAACG,4BANE;AAO3BgB,IAAAA,mBAAmB,EAAEnB,MAAM,CAACQ;AAPD,GAVX;AAmBlBL,EAAAA,4BAA4B,EAAE;AAC5BU,IAAAA,KAAK,EAAEb,MAAM,CAACK,0BADc;AAE5BS,IAAAA,eAAe,EAAEd,MAAM,CAACQ,KAFI;AAG5BO,IAAAA,iBAAiB,EAAEf,MAAM,CAACC,aAHE;AAI5Be,IAAAA,oBAAoB,EAAEhB,MAAM,CAACC,aAJD;AAK5BgB,IAAAA,gBAAgB,EAAEjB,MAAM,CAACE,2BALG;AAM5BgB,IAAAA,gBAAgB,EAAElB,MAAM,CAACG,4BANG;AAO5BgB,IAAAA,mBAAmB,EAAEnB,MAAM,CAACQ;AAPA,GAnBZ;AA4BlBJ,EAAAA,yBAAyB,EAAE;AACzBS,IAAAA,KAAK,EAAEb,MAAM,CAACQ,KADW;AAEzBM,IAAAA,eAAe,EAAEd,MAAM,CAACQ,KAFC;AAGzBO,IAAAA,iBAAiB,EAAEf,MAAM,CAACC,aAHD;AAIzBe,IAAAA,oBAAoB,EAAEhB,MAAM,CAACC,aAJJ;AAKzBgB,IAAAA,gBAAgB,EAAEjB,MAAM,CAACI,yBALA;AAMzBc,IAAAA,gBAAgB,EAAElB,MAAM,CAACK,0BANA;AAOzBc,IAAAA,mBAAmB,EAAEnB,MAAM,CAACM;AAPH,GA5BT;AAqClBD,EAAAA,0BAA0B,EAAE;AAC1BQ,IAAAA,KAAK,EAAEb,MAAM,CAACQ,KADY;AAE1BM,IAAAA,eAAe,EAAEd,MAAM,CAACQ,KAFE;AAG1BO,IAAAA,iBAAiB,EAAEf,MAAM,CAACC,aAHA;AAI1Be,IAAAA,oBAAoB,EAAEhB,MAAM,CAACC,aAJH;AAK1BgB,IAAAA,gBAAgB,EAAEjB,MAAM,CAACI,yBALC;AAM1Bc,IAAAA,gBAAgB,EAAElB,MAAM,CAACK,0BANC;AAO1Bc,IAAAA,mBAAmB,EAAEnB,MAAM,CAACQ;AAPF,GArCV;AA8ClBF,EAAAA,8BAA8B,EAAE;AAC9BO,IAAAA,KAAK,EAAEb,MAAM,CAACQ,KADgB;AAE9BM,IAAAA,eAAe,EAAEd,MAAM,CAACQ,KAFM;AAG9BO,IAAAA,iBAAiB,EAAEf,MAAM,CAACC,aAHI;AAI9Be,IAAAA,oBAAoB,EAAEhB,MAAM,CAACC,aAJC;AAK9BgB,IAAAA,gBAAgB,EAAEjB,MAAM,CAACM,8BALK;AAM9BY,IAAAA,gBAAgB,EAAElB,MAAM,CAACO,+BANK;AAO9BY,IAAAA,mBAAmB,EAAEnB,MAAM,CAACM;AAPE,GA9Cd;AAuDlBC,EAAAA,+BAA+B,EAAE;AAC/BM,IAAAA,KAAK,EAAEb,MAAM,CAACQ,KADiB;AAE/BM,IAAAA,eAAe,EAAEd,MAAM,CAACQ,KAFO;AAG/BO,IAAAA,iBAAiB,EAAEf,MAAM,CAACC,aAHK;AAI/Be,IAAAA,oBAAoB,EAAEhB,MAAM,CAACC,aAJE;AAK/BgB,IAAAA,gBAAgB,EAAEjB,MAAM,CAACM,8BALM;AAM/BY,IAAAA,gBAAgB,EAAElB,MAAM,CAACO,+BANM;AAO/BY,IAAAA,mBAAmB,EAAEnB,MAAM,CAACQ;AAPG,GAvDf;AAgElBa,EAAAA,KAAK,EAAE;AACLR,IAAAA,KAAK,EAAEb,MAAM,CAACC,aADT;AAELa,IAAAA,eAAe,EAAEd,MAAM,CAACE,2BAFnB;AAGLa,IAAAA,iBAAiB,EAAEf,MAAM,CAACC,aAHrB;AAILe,IAAAA,oBAAoB,EAAEhB,MAAM,CAACC,aAJxB;AAKLgB,IAAAA,gBAAgB,EAAEjB,MAAM,CAACC,aALpB;AAMLiB,IAAAA,gBAAgB,EAAElB,MAAM,CAACC,aANpB;AAOLkB,IAAAA,mBAAmB,EAAEnB,MAAM,CAACC;AAPvB;AAhEW,CAApB;AA8EA,IAAMqB,kBAAkB,GAAG,GAA3B;AAEA,IAAMC,eAAe,GAAG,EAAxB;AAEA,IAAMC,oBAAoB,GAAG,GAA7B;AAEA,IAAMC,mBAAmB,GAAGD,oBAAoB,GAAGF,kBAAnD;AAEA,IAAMI,2BAA2B,GAAG,EAApC;AAoEA,IAAMC,cAAc,GAAG;AAErBC,EAAAA,iBAAiB,EAAE,6BAAW;AAAA;;AAC5B,SAAKC,cAAL,GAAsBpC,cAAc,CAAC,IAAD,CAApC;;AACA,QAAI,KAAKoC,cAAL,IAAuB,KAAKA,cAAL,CAAoBC,gBAA/C,EAAiE;AAC/D,WAAKC,sBAAL,GAA8B,UAAAC,CAAC,EAAI;AACjC,YAAI,KAAI,CAACC,0BAAT,EAAqC;AACnC,cACE,KAAI,CAACC,KAAL,CAAWC,SAAX,CAAqBC,UAArB,IACA,KAAI,CAACF,KAAL,CAAWC,SAAX,CAAqBC,UAArB,KAAoCpC,MAAM,CAACC,aAF7C,EAGE;AACA,YAAA,KAAI,CAACoC,iCAAL,CAAuC;AAAEC,cAAAA,WAAW,EAAEN;AAAf,aAAvC;AACD;;AACD,UAAA,KAAI,CAACC,0BAAL,GAAkC,KAAlC;AACD;AACF,OAVD;;AAWA,WAAKJ,cAAL,CAAoBC,gBAApB,CAAqC,MAArC,EAA6C,KAAKC,sBAAlD;AACD;AACF,GAlBoB;AAuBrBQ,EAAAA,oBAAoB,EAAE,gCAAW;AAC/B,QAAI,KAAKV,cAAL,IAAuB,KAAKA,cAAL,CAAoBC,gBAA/C,EAAiE;AAC/D,WAAKD,cAAL,CAAoBW,mBAApB,CAAwC,MAAxC,EAAgD,KAAKT,sBAArD;AACD;;AACD,SAAKU,qBAAL,IAA8BC,YAAY,CAAC,KAAKD,qBAAN,CAA1C;AACA,SAAKE,qBAAL,IAA8BD,YAAY,CAAC,KAAKC,qBAAN,CAA1C;AACA,SAAKC,oBAAL,IAA6BF,YAAY,CAAC,KAAKE,oBAAN,CAAzC;AACD,GA9BoB;AAuCrBC,EAAAA,wBAAwB,EAAE,oCAAW;AACnC,WAAO;AACLV,MAAAA,SAAS,EAAE;AAAEC,QAAAA,UAAU,EAAEU,SAAd;AAAyBC,QAAAA,WAAW,EAAE;AAAtC;AADN,KAAP;AAGD,GA3CoB;AAiDrBC,EAAAA,0CAA0C,EAAE,sDAAW;AACrD,WAAO,CAAC,KAAKC,KAAL,CAAWC,0BAAnB;AACD,GAnDoB;AAwDrBC,EAAAA,sCAAsC,EAAE,kDAAW;AACjD,WAAO,CAAC,KAAKF,KAAL,CAAWG,QAAnB;AACD,GA1DoB;AA+DrBC,EAAAA,8BAA8B,EAAE,0CAAW;AACzC,WAAO,IAAP;AACD,GAjEoB;AAsErBC,EAAAA,6BAA6B,EAAE,uCAAStB,CAAT,EAAmB;AAChD,QAAMuB,UAAU,GAAGvB,CAAC,CAACwB,aAArB;AAIAxB,IAAAA,CAAC,CAACyB,OAAF;AACA,SAAKb,oBAAL,IAA6BF,YAAY,CAAC,KAAKE,oBAAN,CAAzC;AACA,SAAKA,oBAAL,GAA4B,IAA5B;AAEA,SAAKV,KAAL,CAAWC,SAAX,CAAqBC,UAArB,GAAkCpC,MAAM,CAACC,aAAzC;AACA,SAAKiC,KAAL,CAAWC,SAAX,CAAqBY,WAArB,GAAmCQ,UAAnC;;AACA,SAAKG,cAAL,CAAoB9C,OAAO,CAACE,eAA5B,EAA6CkB,CAA7C;;AACA,QAAI2B,OAAO,GACT,KAAKC,4BAAL,KAAsCd,SAAtC,GACIe,IAAI,CAACC,GAAL,CAAS,KAAKF,4BAAL,EAAT,EAA8C,CAA9C,CADJ,GAEItC,kBAHN;AAIAqC,IAAAA,OAAO,GAAGI,KAAK,CAACJ,OAAD,CAAL,GAAiBrC,kBAAjB,GAAsCqC,OAAhD;;AACA,QAAIA,OAAO,KAAK,CAAhB,EAAmB;AACjB,WAAKlB,qBAAL,GAA6BuB,UAAU,CAAC,KAAKC,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,EAA6BlC,CAA7B,CAAD,EAAkC2B,OAAlC,CAAvC;AACD,KAFD,MAEO;AACL,WAAKzB,KAAL,CAAWC,SAAX,CAAqBgC,kBAArB,GAA0C,IAA1C;;AACA,WAAKF,YAAL,CAAkBjC,CAAlB;AACD;;AAED,QAAIoC,WAAW,GACb,KAAKC,4BAAL,KAAsCvB,SAAtC,GACIe,IAAI,CAACC,GAAL,CAAS,KAAKO,4BAAL,EAAT,EAA8C,EAA9C,CADJ,GAEI5C,mBAHN;AAIA2C,IAAAA,WAAW,GAAGL,KAAK,CAACK,WAAD,CAAL,GAAqB3C,mBAArB,GAA2C2C,WAAzD;AACA,SAAKzB,qBAAL,GAA6BqB,UAAU,CACrC,KAAKM,gBAAL,CAAsBJ,IAAtB,CAA2B,IAA3B,EAAiClC,CAAjC,CADqC,EAErCoC,WAAW,GAAGT,OAFuB,CAAvC;AAID,GAvGoB;AA4GrBY,EAAAA,+BAA+B,EAAE,yCAASvC,CAAT,EAAmB;AAClD,SAAK0B,cAAL,CAAoB9C,OAAO,CAACG,iBAA5B,EAA+CiB,CAA/C;AACD,GA9GoB;AAmHrBK,EAAAA,iCAAiC,EAAE,2CAASL,CAAT,EAAmB;AACpD,SAAK0B,cAAL,CAAoB9C,OAAO,CAACI,oBAA5B,EAAkDgB,CAAlD;AACD,GArHoB;AA0HrBwC,EAAAA,4BAA4B,EAAE,sCAASxC,CAAT,EAAmB;AAG/C,QAAI,KAAKE,KAAL,CAAWC,SAAX,CAAqBC,UAArB,KAAoCpC,MAAM,CAACE,2BAA/C,EAA4E;AAC1E;AACD;;AAGD,QAAI,CAAC,KAAKgC,KAAL,CAAWC,SAAX,CAAqBgC,kBAA1B,EAA8C;AAC5C;AACD;;AAED,QAAMA,kBAAkB,GAAG,KAAKjC,KAAL,CAAWC,SAAX,CAAqBgC,kBAAhD;AACA,QAAMM,oBAAoB,GAAG,KAAKvC,KAAL,CAAWC,SAAX,CAAqBsC,oBAAlD;AACA,QAAMC,eAAe,GAAG,KAAKC,2BAAL,GACpB,KAAKA,2BAAL,EADoB,GAEpB;AACEC,MAAAA,IAAI,EAAErD,eADR;AAEEsD,MAAAA,KAAK,EAAEtD,eAFT;AAGEuD,MAAAA,GAAG,EAAEvD,eAHP;AAIEwD,MAAAA,MAAM,EAAExD;AAJV,KAFJ;AASA,QAAIyD,eAAe,GAAGN,eAAe,CAACE,IAAtC;AACA,QAAIK,cAAc,GAAGP,eAAe,CAACI,GAArC;AACA,QAAII,gBAAgB,GAAGR,eAAe,CAACG,KAAvC;AACA,QAAIM,iBAAiB,GAAGT,eAAe,CAACK,MAAxC;AAEA,QAAMK,OAAO,GAAG,KAAKC,mBAAL,GAA2B,KAAKA,mBAAL,EAA3B,GAAwD,IAAxE;;AAEA,QAAID,OAAJ,EAAa;AACXJ,MAAAA,eAAe,IAAII,OAAO,CAACR,IAA3B;AACAK,MAAAA,cAAc,IAAIG,OAAO,CAACN,GAA1B;AACAI,MAAAA,gBAAgB,IAAIE,OAAO,CAACP,KAA5B;AACAM,MAAAA,iBAAiB,IAAIC,OAAO,CAACL,MAA7B;AACD;;AAED,QAAMO,KAAK,GAAGzF,eAAe,CAAC0F,kBAAhB,CAAmCvD,CAAC,CAACM,WAArC,CAAd;AACA,QAAMkD,KAAK,GAAGF,KAAK,IAAIA,KAAK,CAACE,KAA7B;AACA,QAAMC,KAAK,GAAGH,KAAK,IAAIA,KAAK,CAACG,KAA7B;;AAEA,QAAI,KAAKC,eAAT,EAA0B;AACxB,UAAMC,aAAa,GAAG,KAAKC,yBAAL,CACpBJ,KADoB,EAEpBC,KAFoB,EAGpB,KAAKC,eAAL,CAAqBF,KAHD,EAIpB,KAAKE,eAAL,CAAqBD,KAJD,CAAtB;;AAMA,UAAIE,aAAa,GAAGjE,2BAApB,EAAiD;AAC/C,aAAKmE,4BAAL;AACD;AACF;;AAED,QAAMC,mBAAmB,GACvBN,KAAK,GAAGrB,kBAAkB,CAACS,IAAnB,GAA0BI,eAAlC,IACAS,KAAK,GAAGtB,kBAAkB,CAACW,GAAnB,GAAyBG,cADjC,IAEAO,KAAK,GAAGrB,kBAAkB,CAACS,IAAnB,GAA0BH,oBAAoB,CAACsB,KAA/C,GAAuDb,gBAF/D,IAGAO,KAAK,GAAGtB,kBAAkB,CAACW,GAAnB,GAAyBL,oBAAoB,CAACuB,MAA9C,GAAuDb,iBAJjE;;AAKA,QAAIW,mBAAJ,EAAyB;AACvB,WAAKpC,cAAL,CAAoB9C,OAAO,CAACK,gBAA5B,EAA8Ce,CAA9C;;AACA,UAAMiE,QAAQ,GAAG,KAAK/D,KAAL,CAAWC,SAAX,CAAqBC,UAAtC;;AACA,UAAI6D,QAAQ,KAAKjG,MAAM,CAACE,2BAAxB,EAAqD;AAEnD,aAAK2F,4BAAL;AACD;AACF,KAPD,MAOO;AACL,WAAKA,4BAAL;;AACA,WAAKnC,cAAL,CAAoB9C,OAAO,CAACM,gBAA5B,EAA8Cc,CAA9C;AACD;AACF,GA/LoB;AA6QrBkE,EAAAA,6BAA6B,EAAE,yCAAW;AACxC,QAAMC,GAAG,GAAG,KAAKjE,KAAL,CAAWC,SAAX,CAAqBY,WAAjC;;AACA,QAAIoD,GAAG,IAAI,IAAX,EAAiB;AACf;AACD;;AAEDrG,IAAAA,SAAS,CAACsG,OAAV,CAAkBD,GAAlB,EAAuB,KAAKE,kBAA5B;AACD,GApRoB;AAsRrBA,EAAAA,kBAAkB,EAAE,4BAClBC,CADkB,EAElBC,CAFkB,EAGlBR,KAHkB,EAIlBC,MAJkB,EAKlBQ,OALkB,EAMlBC,OANkB,EAOlB;AAEA,QAAI,CAACH,CAAD,IAAM,CAACC,CAAP,IAAY,CAACR,KAAb,IAAsB,CAACC,MAAvB,IAAiC,CAACQ,OAAlC,IAA6C,CAACC,OAAlD,EAA2D;AACzD;AACD;;AACD,SAAKvE,KAAL,CAAWC,SAAX,CAAqBgC,kBAArB,IACExE,QAAQ,CAAC+G,OAAT,CAAiB,KAAKxE,KAAL,CAAWC,SAAX,CAAqBgC,kBAAtC,CADF;AAEA,SAAKjC,KAAL,CAAWC,SAAX,CAAqBsC,oBAArB,IAEEjF,kBAAkB,CAACkH,OAAnB,CAA2B,KAAKxE,KAAL,CAAWC,SAAX,CAAqBsC,oBAAhD,CAFF;AAGA,SAAKvC,KAAL,CAAWC,SAAX,CAAqBgC,kBAArB,GAA0CxE,QAAQ,CAACgH,SAAT,CAAmBH,OAAnB,EAA4BC,OAA5B,CAA1C;AAEA,SAAKvE,KAAL,CAAWC,SAAX,CAAqBsC,oBAArB,GAA4CjF,kBAAkB,CAACmH,SAAnB,CAA6BZ,KAA7B,EAAoCC,MAApC,CAA5C;AACD,GA1SoB;AA4SrB/B,EAAAA,YAAY,EAAE,sBAASjC,CAAT,EAAmB;AAC/B,SAAKS,qBAAL,GAA6B,IAA7B;;AACA,SAAKiB,cAAL,CAAoB9C,OAAO,CAACC,KAA5B,EAAmCmB,CAAnC;AACD,GA/SoB;AAiTrBsC,EAAAA,gBAAgB,EAAE,0BAAStC,CAAT,EAAmB;AACnC,SAAKW,qBAAL,GAA6B,IAA7B;AACA,QAAMsD,QAAQ,GAAG,KAAK/D,KAAL,CAAWC,SAAX,CAAqBC,UAAtC;;AACA,QACE6D,QAAQ,KAAKjG,MAAM,CAACI,yBAApB,IACA6F,QAAQ,KAAKjG,MAAM,CAACM,8BAFtB,EAGE;AACAsG,MAAAA,OAAO,CAACvF,KAAR,CACE,yCACE4E,QADF,GAEE,QAFF,GAGEjG,MAAM,CAACM,8BAHT,GAIE,qCAJF,GAKE,2EANJ;AAQD,KAZD,MAYO;AACL,WAAKoD,cAAL,CAAoB9C,OAAO,CAACO,mBAA5B,EAAiDa,CAAjD;AACD;AACF,GAnUoB;AA6UrB0B,EAAAA,cAAc,EAAE,wBAASmD,MAAT,EAAyB7E,CAAzB,EAAmC;AACjD,QAAMe,WAAW,GAAG,KAAKb,KAAL,CAAWC,SAAX,CAAqBY,WAAzC;AACA,QAAMkD,QAAQ,GAAG,KAAK/D,KAAL,CAAWC,SAAX,CAAqBC,UAAtC;AACA,QAAM0E,SAAS,GAAG1F,WAAW,CAAC6E,QAAD,CAAX,IAAyB7E,WAAW,CAAC6E,QAAD,CAAX,CAAsBY,MAAtB,CAA3C;;AACA,QAAI,CAAC9D,WAAD,IAAgB8D,MAAM,KAAKjG,OAAO,CAACG,iBAAvC,EAA0D;AACxD;AACD;;AACD,QAAI,CAAC+F,SAAL,EAAgB;AACd,YAAM,IAAIC,KAAJ,CACJ,0BACEF,MADF,GAEE,cAFF,GAGEZ,QAHF,GAIE,6BAJF,GAKElD,WALF,GAME,GAPE,CAAN;AASD;;AACD,QAAI+D,SAAS,KAAK9G,MAAM,CAACQ,KAAzB,EAAgC;AAC9B,YAAM,IAAIuG,KAAJ,CACJ,uCACEd,QADF,GAEE,QAFF,GAGEY,MAHF,GAIE,mBAJF,GAKE9D,WALF,GAME,GAPE,CAAN;AASD;;AACD,QAAIkD,QAAQ,KAAKa,SAAjB,EAA4B;AAC1B,WAAKE,gCAAL,CAAsCf,QAAtC,EAAgDa,SAAhD,EAA2DD,MAA3D,EAAmE7E,CAAnE;;AACA,WAAKE,KAAL,CAAWC,SAAX,CAAqBC,UAArB,GAAkC0E,SAAlC;AACD;AACF,GA9WoB;AAgXrBjB,EAAAA,4BAA4B,EAAE,wCAAW;AACvC,SAAKlD,qBAAL,IAA8BD,YAAY,CAAC,KAAKC,qBAAN,CAA1C;AACA,SAAKA,qBAAL,GAA6B,IAA7B;AACD,GAnXoB;AAqXrBsE,EAAAA,YAAY,EAAE,sBAAS/E,KAAT,EAAwB;AACpC,WACEA,KAAK,KAAKlC,MAAM,CAACI,yBAAjB,IAA8C8B,KAAK,KAAKlC,MAAM,CAACM,8BADjE;AAGD,GAzXoB;AA2XrB4G,EAAAA,oBAAoB,EAAE,8BAASlF,CAAT,EAAmB;AACvC,QAAMsD,KAAK,GAAGzF,eAAe,CAAC0F,kBAAhB,CAAmCvD,CAAC,CAACM,WAArC,CAAd;AACA,QAAMkD,KAAK,GAAGF,KAAK,IAAIA,KAAK,CAACE,KAA7B;AACA,QAAMC,KAAK,GAAGH,KAAK,IAAIA,KAAK,CAACG,KAA7B;AACA,SAAKC,eAAL,GAAuB;AACrBF,MAAAA,KAAK,EAALA,KADqB;AAErBC,MAAAA,KAAK,EAALA,KAFqB;;AAGrB,UAAI0B,SAAJ,GAAgB;AACd,eAAO7B,KAAK,IAAIA,KAAK,CAAC6B,SAAtB;AACD,OALoB;;AAMrB,UAAIC,SAAJ,GAAgB;AACd,eAAO9B,KAAK,IAAIA,KAAK,CAAC8B,SAAtB;AACD;;AARoB,KAAvB;AAUD,GAzYoB;AA2YrBxB,EAAAA,yBAAyB,EAAE,mCAASyB,EAAT,EAAqBC,EAArB,EAAiCC,EAAjC,EAA6CC,EAA7C,EAAyD;AAClF,QAAMC,MAAM,GAAGJ,EAAE,GAAGE,EAApB;AACA,QAAMG,MAAM,GAAGJ,EAAE,GAAGE,EAApB;AACA,WAAO3D,IAAI,CAAC8D,IAAL,CAAUF,MAAM,GAAGA,MAAT,GAAkBC,MAAM,GAAGA,MAArC,CAAP;AACD,GA/YoB;AA4ZrBV,EAAAA,gCAAgC,EAAE,0CAChCf,QADgC,EAEhCa,SAFgC,EAGhCD,MAHgC,EAIhC7E,CAJgC,EAKhC;AACA,QAAM4F,cAAc,GAAG,KAAKX,YAAL,CAAkBhB,QAAlB,CAAvB;;AACA,QAAM4B,cAAc,GAAG,KAAKZ,YAAL,CAAkBH,SAAlB,CAAvB;;AAEA,QAAMgB,aAAa,GACjBjB,MAAM,KAAKjG,OAAO,CAACI,oBAAnB,IAA2C6F,MAAM,KAAKjG,OAAO,CAACG,iBADhE;;AAGA,QAAI+G,aAAJ,EAAmB;AACjB,WAAKjC,4BAAL;AACD;;AAED,QAAI,CAACpF,QAAQ,CAACwF,QAAD,CAAT,IAAuBxF,QAAQ,CAACqG,SAAD,CAAnC,EAAgD;AAC9C,WAAKZ,6BAAL;AACD;;AAED,QAAIxF,YAAY,CAACuF,QAAD,CAAZ,IAA0BY,MAAM,KAAKjG,OAAO,CAACO,mBAAjD,EAAsE;AACpE,WAAK4G,wBAAL,IAAiC,KAAKA,wBAAL,CAA8B/F,CAA9B,CAAjC;AACD;;AAED,QAAI6F,cAAc,IAAI,CAACD,cAAvB,EAAuC;AACrC,WAAKI,eAAL,CAAqBhG,CAArB;AACD,KAFD,MAEO,IAAI,CAAC6F,cAAD,IAAmBD,cAAvB,EAAuC;AAC5C,WAAKK,aAAL,CAAmBjG,CAAnB;AACD;;AAED,QAAItB,YAAY,CAACuF,QAAD,CAAZ,IAA0BY,MAAM,KAAKjG,OAAO,CAACG,iBAAjD,EAAoE;AAClE,UAAMmH,mBAAmB,GAAG,CAAC,CAAC,KAAKjF,KAAL,CAAWkF,WAAzC;AACA,UAAMC,8BAA8B,GAClCzH,gBAAgB,CAACsF,QAAD,CAAhB,KACC,CAACiC,mBAAD,IACC,CAAC,KAAK7E,8BAAL,EAFH,CADF;AAKA,UAAMgF,iBAAiB,GAAG,CAAC1H,gBAAgB,CAACsF,QAAD,CAAjB,IAA+BmC,8BAAzD;;AACA,UAAIC,iBAAiB,IAAI,KAAKC,oBAA9B,EAAoD;AAClD,YAAI,CAACT,cAAD,IAAmB,CAACD,cAAxB,EAAwC;AAEtC,eAAKI,eAAL,CAAqBhG,CAArB;;AACA,eAAKiG,aAAL,CAAmBjG,CAAnB;AACD;;AACD,aAAKsG,oBAAL,CAA0BtG,CAA1B;AACD;AACF;;AAED,SAAKS,qBAAL,IAA8BC,YAAY,CAAC,KAAKD,qBAAN,CAA1C;AACA,SAAKA,qBAAL,GAA6B,IAA7B;AACD,GA9coB;AAgdrBuF,EAAAA,eAAe,EAAE,yBAAShG,CAAT,EAAmB;AAClC,SAAKkF,oBAAL,CAA0BlF,CAA1B;;AACA,SAAKuG,4BAAL,IAAqC,KAAKA,4BAAL,CAAkCvG,CAAlC,CAArC;AACD,GAndoB;AAqdrBiG,EAAAA,aAAa,EAAE,uBAASjG,CAAT,EAAmB;AAAA;;AAChC,QAAI,KAAKwG,6BAAT,EAAwC;AACtC,UAAI,KAAKC,2BAAL,IAAoC,KAAKA,2BAAL,EAAxC,EAA4E;AAC1E,aAAK7F,oBAAL,GAA4BoB,UAAU,CAAC,YAAM;AAC3C,UAAA,MAAI,CAACwE,6BAAL,CAAmCxG,CAAnC;AACD,SAFqC,EAEnC,KAAKyG,2BAAL,EAFmC,CAAtC;AAGD,OAJD,MAIO;AACL,aAAKD,6BAAL,CAAmCxG,CAAnC;AACD;AACF;AACF,GA/doB;AAmerB0G,EAAAA,uBAAuB,EAAE,iCAAS1G,CAAT,EAAmB;AAC1C,QAAM2G,KAAK,GAAG,EAAd;AACA,QAAMC,KAAK,GAAG,EAAd;AAF0C,QAGlCC,IAHkC,GAGlB7G,CAHkB,CAGlC6G,IAHkC;AAAA,QAG5BC,KAH4B,GAGlB9G,CAHkB,CAG5B8G,KAH4B;;AAI1C,QAAIA,KAAK,KAAKH,KAAV,IAAmBG,KAAK,KAAKF,KAAjC,EAAwC;AACtC,UAAIC,IAAI,KAAK,SAAb,EAAwB;AACtB,YAAI,CAAC,KAAK5G,0BAAV,EAAsC;AACpC,cACE,CAAC,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,UAAtB,IACA,KAAKF,KAAL,CAAWC,SAAX,CAAqBC,UAArB,KAAoCpC,MAAM,CAACC,aAF7C,EAGE;AACA,iBAAKqD,6BAAL,CAAmCtB,CAAnC;AACA,iBAAKC,0BAAL,GAAkC,IAAlC;AACD;AACF;AACF,OAVD,MAUO,IAAI4G,IAAI,KAAK,OAAb,EAAsB;AAC3B,YAAI,KAAK5G,0BAAT,EAAqC;AACnC,cACE,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,UAArB,IACA,KAAKF,KAAL,CAAWC,SAAX,CAAqBC,UAArB,KAAoCpC,MAAM,CAACC,aAF7C,EAGE;AACA,iBAAKsE,+BAAL,CAAqCvC,CAArC;AACA,iBAAKC,0BAAL,GAAkC,KAAlC;AACD;AACF;AACF;;AACDD,MAAAA,CAAC,CAAC+G,eAAF;;AAGA,UAAI,EAAED,KAAK,KAAKH,KAAV,IAAmBpJ,iBAAiB,CAACyJ,eAAlB,CAAkC,KAAK/F,KAAvC,MAAkD,MAAvE,CAAJ,EAAoF;AAClFjB,QAAAA,CAAC,CAACiH,cAAF;AACD;AACF;AACF;AApgBoB,CAAvB;AAugBA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAExH,cADS;AAEhByH,EAAAA,kBAAkB,EAAE,KAFJ;AAMhBC,EAAAA,eAAe,EAAE,+BAAgC;AAAA,QAA7BC,KAA6B,QAA7BA,KAA6B;AAAA,QAAtBlE,OAAsB,QAAtBA,OAAsB;;AAC/C,QAAImE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAI,CAACP,SAAS,CAACE,kBAAf,EAAmC;AACjC,eAAO,IAAP;AACD;;AACD,UAAMM,iBAAiB,GAAG,EAA1B;AACAtE,MAAAA,OAAO,GAAGA,OAAO,IAAI;AAAEN,QAAAA,GAAG,EAAE,CAAP;AAAUC,QAAAA,MAAM,EAAE,CAAlB;AAAqBH,QAAAA,IAAI,EAAE,CAA3B;AAA8BC,QAAAA,KAAK,EAAE;AAArC,OAArB;;AACA,WAAK,IAAM8E,GAAX,IAAkBvE,OAAlB,EAA2B;AACzBsE,QAAAA,iBAAiB,CAACC,GAAD,CAAjB,GAAyB,CAACvE,OAAO,CAACuE,GAAD,CAAjC;AACD;;AACD,UAAMC,QAAQ,GAAG,MAAM,CAAC,aAAalK,cAAc,CAAC4J,KAAD,CAAd,CAAsBO,QAAtB,CAA+B,EAA/B,CAAd,EAAkDC,MAAlD,CAAyD,CAAC,CAA1D,CAAvB;AACA,aACE,oBAAC,IAAD;AACE,QAAA,aAAa,EAAC,MADhB;AAEE,QAAA,KAAK;AACHC,UAAAA,QAAQ,EAAE,UADP;AAEHC,UAAAA,WAAW,EAAEJ,QAAQ,CAACK,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,IAAwB,IAFlC;AAGHC,UAAAA,WAAW,EAAE,CAHV;AAIHC,UAAAA,WAAW,EAAE,QAJV;AAKHC,UAAAA,eAAe,EAAER,QAAQ,CAACK,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,IAAwB;AALtC,WAMAP,iBANA,CAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAaD;AACF;AA/Be,CAAlB;AAkCA,eAAeR,SAAf","sourcesContent":["/* eslint-disable react/prop-types */\n\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport AccessibilityUtil from '../../modules/AccessibilityUtil';\nimport BoundingDimensions from './BoundingDimensions';\nimport findNodeHandle from '../findNodeHandle';\nimport normalizeColor from 'normalize-css-color';\nimport Position from './Position';\nimport React from 'react';\nimport TouchEventUtils from 'fbjs/lib/TouchEventUtils';\nimport UIManager from '../UIManager';\nimport View from '../View';\n\ntype Event = Object;\n\n/**\n * `Touchable`: Taps done right.\n *\n * You hook your `ResponderEventPlugin` events into `Touchable`. `Touchable`\n * will measure time/geometry and tells you when to give feedback to the user.\n *\n * ====================== Touchable Tutorial ===============================\n * The `Touchable` mixin helps you handle the \"press\" interaction. It analyzes\n * the geometry of elements, and observes when another responder (scroll view\n * etc) has stolen the touch lock. It notifies your component when it should\n * give feedback to the user. (bouncing/highlighting/unhighlighting).\n *\n * - When a touch was activated (typically you highlight)\n * - When a touch was deactivated (typically you unhighlight)\n * - When a touch was \"pressed\" - a touch ended while still within the geometry\n *   of the element, and no other element (like scroller) has \"stolen\" touch\n *   lock (\"responder\") (Typically you bounce the element).\n *\n * A good tap interaction isn't as simple as you might think. There should be a\n * slight delay before showing a highlight when starting a touch. If a\n * subsequent touch move exceeds the boundary of the element, it should\n * unhighlight, but if that same touch is brought back within the boundary, it\n * should rehighlight again. A touch can move in and out of that boundary\n * several times, each time toggling highlighting, but a \"press\" is only\n * triggered if that touch ends while within the element's boundary and no\n * scroller (or anything else) has stolen the lock on touches.\n *\n * To create a new type of component that handles interaction using the\n * `Touchable` mixin, do the following:\n *\n * - Initialize the `Touchable` state.\n *\n *   getInitialState: function() {\n *     return merge(this.touchableGetInitialState(), yourComponentState);\n *   }\n *\n * - Choose the rendered component who's touches should start the interactive\n *   sequence. On that rendered node, forward all `Touchable` responder\n *   handlers. You can choose any rendered node you like. Choose a node whose\n *   hit target you'd like to instigate the interaction sequence:\n *\n *   // In render function:\n *   return (\n *     <View\n *       onStartShouldSetResponder={this.touchableHandleStartShouldSetResponder}\n *       onResponderTerminationRequest={this.touchableHandleResponderTerminationRequest}\n *       onResponderGrant={this.touchableHandleResponderGrant}\n *       onResponderMove={this.touchableHandleResponderMove}\n *       onResponderRelease={this.touchableHandleResponderRelease}\n *       onResponderTerminate={this.touchableHandleResponderTerminate}>\n *       <View>\n *         Even though the hit detection/interactions are triggered by the\n *         wrapping (typically larger) node, we usually end up implementing\n *         custom logic that highlights this inner one.\n *       </View>\n *     </View>\n *   );\n *\n * - You may set up your own handlers for each of these events, so long as you\n *   also invoke the `touchable*` handlers inside of your custom handler.\n *\n * - Implement the handlers on your component class in order to provide\n *   feedback to the user. See documentation for each of these class methods\n *   that you should implement.\n *\n *   touchableHandlePress: function() {\n *      this.performBounceAnimation();  // or whatever you want to do.\n *   },\n *   touchableHandleActivePressIn: function() {\n *     this.beginHighlighting(...);  // Whatever you like to convey activation\n *   },\n *   touchableHandleActivePressOut: function() {\n *     this.endHighlighting(...);  // Whatever you like to convey deactivation\n *   },\n *\n * - There are more advanced methods you can implement (see documentation below):\n *   touchableGetHighlightDelayMS: function() {\n *     return 20;\n *   }\n *   // In practice, *always* use a predeclared constant (conserve memory).\n *   touchableGetPressRectOffset: function() {\n *     return {top: 20, left: 20, right: 20, bottom: 100};\n *   }\n */\n\n/**\n * Touchable states.\n */\nconst States = {\n  NOT_RESPONDER: 'NOT_RESPONDER', // Not the responder\n  RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN', // Responder, inactive, in the `PressRect`\n  RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT', // Responder, inactive, out of `PressRect`\n  RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN', // Responder, active, in the `PressRect`\n  RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT', // Responder, active, out of `PressRect`\n  RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN', // Responder, active, in the `PressRect`, after long press threshold\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT', // Responder, active, out of `PressRect`, after long press threshold\n  ERROR: 'ERROR'\n};\n\n/**\n * Quick lookup map for states that are considered to be \"active\"\n */\nconst IsActive = {\n  RESPONDER_ACTIVE_PRESS_OUT: true,\n  RESPONDER_ACTIVE_PRESS_IN: true\n};\n\n/**\n * Quick lookup for states that are considered to be \"pressing\" and are\n * therefore eligible to result in a \"selection\" if the press stops.\n */\nconst IsPressingIn = {\n  RESPONDER_INACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n};\n\nconst IsLongPressingIn = {\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n};\n\n/**\n * Inputs to the state machine.\n */\nconst Signals = {\n  DELAY: 'DELAY',\n  RESPONDER_GRANT: 'RESPONDER_GRANT',\n  RESPONDER_RELEASE: 'RESPONDER_RELEASE',\n  RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',\n  ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',\n  LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',\n  LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED'\n};\n\n/**\n * Mapping from States x Signals => States\n */\nconst Transitions = {\n  NOT_RESPONDER: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.ERROR,\n    RESPONDER_TERMINATED: States.ERROR,\n    ENTER_PRESS_RECT: States.ERROR,\n    LEAVE_PRESS_RECT: States.ERROR,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  error: {\n    DELAY: States.NOT_RESPONDER,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.NOT_RESPONDER,\n    LEAVE_PRESS_RECT: States.NOT_RESPONDER,\n    LONG_PRESS_DETECTED: States.NOT_RESPONDER\n  }\n};\n\n// ==== Typical Constants for integrating into UI components ====\n// var HIT_EXPAND_PX = 20;\n// var HIT_VERT_OFFSET_PX = 10;\nconst HIGHLIGHT_DELAY_MS = 130;\n\nconst PRESS_EXPAND_PX = 20;\n\nconst LONG_PRESS_THRESHOLD = 500;\n\nconst LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;\n\nconst LONG_PRESS_ALLOWED_MOVEMENT = 10;\n\n// Default amount \"active\" region protrudes beyond box\n\n/**\n * By convention, methods prefixed with underscores are meant to be @private,\n * and not @protected. Mixers shouldn't access them - not even to provide them\n * as callback handlers.\n *\n *\n * ========== Geometry =========\n * `Touchable` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n *  +--------------------------+\n *  |                          | - \"Start\" events in `HitRect` cause `HitRect`\n *  |  +--------------------+  |   to become the responder.\n *  |  |  +--------------+  |  | - `HitRect` is typically expanded around\n *  |  |  |              |  |  |   the `VisualRect`, but shifted downward.\n *  |  |  |  VisualRect  |  |  | - After pressing down, after some delay,\n *  |  |  |              |  |  |   and before letting up, the Visual React\n *  |  |  +--------------+  |  |   will become \"active\". This makes it eligible\n *  |  |     HitRect        |  |   for being highlighted (so long as the\n *  |  +--------------------+  |   press remains in the `PressRect`).\n *  |        PressRect     o   |\n *  +----------------------|---+\n *           Out Region    |\n *                         +-----+ This gap between the `HitRect` and\n *                                 `PressRect` allows a touch to move far away\n *                                 from the original hit rect, and remain\n *                                 highlighted, and eligible for a \"Press\".\n *                                 Customize this via\n *                                 `touchableGetPressRectOffset()`.\n *\n *\n *\n * ======= State Machine =======\n *\n * +-------------+ <---+ RESPONDER_RELEASE\n * |NOT_RESPONDER|\n * +-------------+ <---+ RESPONDER_TERMINATED\n *     +\n *     | RESPONDER_GRANT (HitRect)\n *     v\n * +---------------------------+  DELAY   +-------------------------+  T + DELAY     +------------------------------+\n * |RESPONDER_INACTIVE_PRESS_IN|+-------->|RESPONDER_ACTIVE_PRESS_IN| +------------> |RESPONDER_ACTIVE_LONG_PRESS_IN|\n * +---------------------------+          +-------------------------+                +------------------------------+\n *     +            ^                         +           ^                                 +           ^\n *     |LEAVE_      |ENTER_                   |LEAVE_     |ENTER_                           |LEAVE_     |ENTER_\n *     |PRESS_RECT  |PRESS_RECT               |PRESS_RECT |PRESS_RECT                       |PRESS_RECT |PRESS_RECT\n *     |            |                         |           |                                 |           |\n *     v            +                         v           +                                 v           +\n * +----------------------------+  DELAY  +--------------------------+               +-------------------------------+\n * |RESPONDER_INACTIVE_PRESS_OUT|+------->|RESPONDER_ACTIVE_PRESS_OUT|               |RESPONDER_ACTIVE_LONG_PRESS_OUT|\n * +----------------------------+         +--------------------------+               +-------------------------------+\n *\n * T + DELAY => LONG_PRESS_DELAY_MS + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the `touchableHandlePress` abstract method invocation that occurs\n * when a responder is released while in either of the \"Press\" states.\n *\n * The other important side effects are the highlight abstract method\n * invocations (internal callbacks) to be implemented by the mixer.\n *\n *\n * @lends Touchable.prototype\n */\nconst TouchableMixin = {\n  // HACK (part 1): basic support for touchable interactions using a keyboard\n  componentDidMount: function() {\n    this._touchableNode = findNodeHandle(this);\n    if (this._touchableNode && this._touchableNode.addEventListener) {\n      this._touchableBlurListener = e => {\n        if (this._isTouchableKeyboardActive) {\n          if (\n            this.state.touchable.touchState &&\n            this.state.touchable.touchState !== States.NOT_RESPONDER\n          ) {\n            this.touchableHandleResponderTerminate({ nativeEvent: e });\n          }\n          this._isTouchableKeyboardActive = false;\n        }\n      };\n      this._touchableNode.addEventListener('blur', this._touchableBlurListener);\n    }\n  },\n\n  /**\n   * Clear all timeouts on unmount\n   */\n  componentWillUnmount: function() {\n    if (this._touchableNode && this._touchableNode.addEventListener) {\n      this._touchableNode.removeEventListener('blur', this._touchableBlurListener);\n    }\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n  },\n\n  /**\n   * It's prefer that mixins determine state in this way, having the class\n   * explicitly mix the state in the one and only `getInitialState` method.\n   *\n   * @return {object} State object to be placed inside of\n   * `this.state.touchable`.\n   */\n  touchableGetInitialState: function() {\n    return {\n      touchable: { touchState: undefined, responderID: null }\n    };\n  },\n\n  // ==== Hooks to Gesture Responder system ====\n  /**\n   * Must return true if embedded in a native platform scroll view.\n   */\n  touchableHandleResponderTerminationRequest: function() {\n    return !this.props.rejectResponderTermination;\n  },\n\n  /**\n   * Must return true to start the process of `Touchable`.\n   */\n  touchableHandleStartShouldSetResponder: function() {\n    return !this.props.disabled;\n  },\n\n  /**\n   * Return true to cancel press on long press.\n   */\n  touchableLongPressCancelsPress: function() {\n    return true;\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderGrant` event.\n   */\n  touchableHandleResponderGrant: function(e: Event) {\n    const dispatchID = e.currentTarget;\n    // Since e is used in a callback invoked on another event loop\n    // (as in setTimeout etc), we need to call e.persist() on the\n    // event to make sure it doesn't get reused in the event object pool.\n    e.persist();\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    this.pressOutDelayTimeout = null;\n\n    this.state.touchable.touchState = States.NOT_RESPONDER;\n    this.state.touchable.responderID = dispatchID;\n    this._receiveSignal(Signals.RESPONDER_GRANT, e);\n    let delayMS =\n      this.touchableGetHighlightDelayMS !== undefined\n        ? Math.max(this.touchableGetHighlightDelayMS(), 0)\n        : HIGHLIGHT_DELAY_MS;\n    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;\n    if (delayMS !== 0) {\n      this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);\n    } else {\n      this.state.touchable.positionOnActivate = null;\n      this._handleDelay(e);\n    }\n\n    let longDelayMS =\n      this.touchableGetLongPressDelayMS !== undefined\n        ? Math.max(this.touchableGetLongPressDelayMS(), 10)\n        : LONG_PRESS_DELAY_MS;\n    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;\n    this.longPressDelayTimeout = setTimeout(\n      this._handleLongDelay.bind(this, e),\n      longDelayMS + delayMS\n    );\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderRelease` event.\n   */\n  touchableHandleResponderRelease: function(e: Event) {\n    this._receiveSignal(Signals.RESPONDER_RELEASE, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderTerminate` event.\n   */\n  touchableHandleResponderTerminate: function(e: Event) {\n    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderMove` event.\n   */\n  touchableHandleResponderMove: function(e: Event) {\n    // Not enough time elapsed yet, wait for highlight -\n    // this is just a perf optimization.\n    if (this.state.touchable.touchState === States.RESPONDER_INACTIVE_PRESS_IN) {\n      return;\n    }\n\n    // Measurement may not have returned yet.\n    if (!this.state.touchable.positionOnActivate) {\n      return;\n    }\n\n    const positionOnActivate = this.state.touchable.positionOnActivate;\n    const dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;\n    const pressRectOffset = this.touchableGetPressRectOffset\n      ? this.touchableGetPressRectOffset()\n      : {\n          left: PRESS_EXPAND_PX,\n          right: PRESS_EXPAND_PX,\n          top: PRESS_EXPAND_PX,\n          bottom: PRESS_EXPAND_PX\n        };\n\n    let pressExpandLeft = pressRectOffset.left;\n    let pressExpandTop = pressRectOffset.top;\n    let pressExpandRight = pressRectOffset.right;\n    let pressExpandBottom = pressRectOffset.bottom;\n\n    const hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;\n\n    if (hitSlop) {\n      pressExpandLeft += hitSlop.left;\n      pressExpandTop += hitSlop.top;\n      pressExpandRight += hitSlop.right;\n      pressExpandBottom += hitSlop.bottom;\n    }\n\n    const touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);\n    const pageX = touch && touch.pageX;\n    const pageY = touch && touch.pageY;\n\n    if (this.pressInLocation) {\n      const movedDistance = this._getDistanceBetweenPoints(\n        pageX,\n        pageY,\n        this.pressInLocation.pageX,\n        this.pressInLocation.pageY\n      );\n      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {\n        this._cancelLongPressDelayTimeout();\n      }\n    }\n\n    const isTouchWithinActive =\n      pageX > positionOnActivate.left - pressExpandLeft &&\n      pageY > positionOnActivate.top - pressExpandTop &&\n      pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight &&\n      pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;\n    if (isTouchWithinActive) {\n      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);\n      const curState = this.state.touchable.touchState;\n      if (curState === States.RESPONDER_INACTIVE_PRESS_IN) {\n        // fix for t7967420\n        this._cancelLongPressDelayTimeout();\n      }\n    } else {\n      this._cancelLongPressDelayTimeout();\n      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);\n    }\n  },\n\n  // ==== Abstract Application Callbacks ====\n\n  /**\n   * Invoked when the item should be highlighted. Mixers should implement this\n   * to visually distinguish the `VisualRect` so that the user knows that\n   * releasing a touch will result in a \"selection\" (analog to click).\n   *\n   * @abstract\n   * touchableHandleActivePressIn: function,\n   */\n\n  /**\n   * Invoked when the item is \"active\" (in that it is still eligible to become\n   * a \"select\") but the touch has left the `PressRect`. Usually the mixer will\n   * want to unhighlight the `VisualRect`. If the user (while pressing) moves\n   * back into the `PressRect` `touchableHandleActivePressIn` will be invoked\n   * again and the mixer should probably highlight the `VisualRect` again. This\n   * event will not fire on an `touchEnd/mouseUp` event, only move events while\n   * the user is depressing the mouse/touch.\n   *\n   * @abstract\n   * touchableHandleActivePressOut: function\n   */\n\n  /**\n   * Invoked when the item is \"selected\" - meaning the interaction ended by\n   * letting up while the item was either in the state\n   * `RESPONDER_ACTIVE_PRESS_IN` or `RESPONDER_INACTIVE_PRESS_IN`.\n   *\n   * @abstract\n   * touchableHandlePress: function\n   */\n\n  /**\n   * Invoked when the item is long pressed - meaning the interaction ended by\n   * letting up while the item was in `RESPONDER_ACTIVE_LONG_PRESS_IN`. If\n   * `touchableHandleLongPress` is *not* provided, `touchableHandlePress` will\n   * be called as it normally is. If `touchableHandleLongPress` is provided, by\n   * default any `touchableHandlePress` callback will not be invoked. To\n   * override this default behavior, override `touchableLongPressCancelsPress`\n   * to return false. As a result, `touchableHandlePress` will be called when\n   * lifting up, even if `touchableHandleLongPress` has also been called.\n   *\n   * @abstract\n   * touchableHandleLongPress: function\n   */\n\n  /**\n   * Returns the number of millis to wait before triggering a highlight.\n   *\n   * @abstract\n   * touchableGetHighlightDelayMS: function\n   */\n\n  /**\n   * Returns the amount to extend the `HitRect` into the `PressRect`. Positive\n   * numbers mean the size expands outwards.\n   *\n   * @abstract\n   * touchableGetPressRectOffset: function\n   */\n\n  // ==== Internal Logic ====\n\n  /**\n   * Measures the `HitRect` node on activation. The Bounding rectangle is with\n   * respect to viewport - not page, so adding the `pageXOffset/pageYOffset`\n   * should result in points that are in the same coordinate system as an\n   * event's `globalX/globalY` data values.\n   *\n   * - Consider caching this for the lifetime of the component, or possibly\n   *   being able to share this cache between any `ScrollMap` view.\n   *\n   * @sideeffects\n   * @private\n   */\n  _remeasureMetricsOnActivation: function() {\n    const tag = this.state.touchable.responderID;\n    if (tag == null) {\n      return;\n    }\n\n    UIManager.measure(tag, this._handleQueryLayout);\n  },\n\n  _handleQueryLayout: function(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    globalX: number,\n    globalY: number\n  ) {\n    // don't do anything if UIManager failed to measure node\n    if (!x && !y && !width && !height && !globalX && !globalY) {\n      return;\n    }\n    this.state.touchable.positionOnActivate &&\n      Position.release(this.state.touchable.positionOnActivate);\n    this.state.touchable.dimensionsOnActivate &&\n      // $FlowFixMe\n      BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);\n    this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);\n    // $FlowFixMe\n    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(width, height);\n  },\n\n  _handleDelay: function(e: Event) {\n    this.touchableDelayTimeout = null;\n    this._receiveSignal(Signals.DELAY, e);\n  },\n\n  _handleLongDelay: function(e: Event) {\n    this.longPressDelayTimeout = null;\n    const curState = this.state.touchable.touchState;\n    if (\n      curState !== States.RESPONDER_ACTIVE_PRESS_IN &&\n      curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN\n    ) {\n      console.error(\n        'Attempted to transition from state `' +\n          curState +\n          '` to `' +\n          States.RESPONDER_ACTIVE_LONG_PRESS_IN +\n          '`, which is not supported. This is ' +\n          'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.'\n      );\n    } else {\n      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);\n    }\n  },\n\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   *\n   * @param {Signals} signal State machine signal.\n   * @throws Error if invalid state transition or unrecognized signal.\n   * @sideeffects\n   */\n  _receiveSignal: function(signal: string, e: Event) {\n    const responderID = this.state.touchable.responderID;\n    const curState = this.state.touchable.touchState;\n    const nextState = Transitions[curState] && Transitions[curState][signal];\n    if (!responderID && signal === Signals.RESPONDER_RELEASE) {\n      return;\n    }\n    if (!nextState) {\n      throw new Error(\n        'Unrecognized signal `' +\n          signal +\n          '` or state `' +\n          curState +\n          '` for Touchable responder `' +\n          responderID +\n          '`'\n      );\n    }\n    if (nextState === States.ERROR) {\n      throw new Error(\n        'Touchable cannot transition from `' +\n          curState +\n          '` to `' +\n          signal +\n          '` for responder `' +\n          responderID +\n          '`'\n      );\n    }\n    if (curState !== nextState) {\n      this._performSideEffectsForTransition(curState, nextState, signal, e);\n      this.state.touchable.touchState = nextState;\n    }\n  },\n\n  _cancelLongPressDelayTimeout: function() {\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.longPressDelayTimeout = null;\n  },\n\n  _isHighlight: function(state: string) {\n    return (\n      state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN\n    );\n  },\n\n  _savePressInLocation: function(e: Event) {\n    const touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);\n    const pageX = touch && touch.pageX;\n    const pageY = touch && touch.pageY;\n    this.pressInLocation = {\n      pageX,\n      pageY,\n      get locationX() {\n        return touch && touch.locationX;\n      },\n      get locationY() {\n        return touch && touch.locationY;\n      }\n    };\n  },\n\n  _getDistanceBetweenPoints: function(aX: number, aY: number, bX: number, bY: number) {\n    const deltaX = aX - bX;\n    const deltaY = aY - bY;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  },\n\n  /**\n   * Will perform a transition between touchable states, and identify any\n   * highlighting or unhighlighting that must be performed for this particular\n   * transition.\n   *\n   * @param {States} curState Current Touchable state.\n   * @param {States} nextState Next Touchable state.\n   * @param {Signal} signal Signal that triggered the transition.\n   * @param {Event} e Native event.\n   * @sideeffects\n   */\n  _performSideEffectsForTransition: function(\n    curState: string,\n    nextState: string,\n    signal: string,\n    e: Event\n  ) {\n    const curIsHighlight = this._isHighlight(curState);\n    const newIsHighlight = this._isHighlight(nextState);\n\n    const isFinalSignal =\n      signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;\n\n    if (isFinalSignal) {\n      this._cancelLongPressDelayTimeout();\n    }\n\n    if (!IsActive[curState] && IsActive[nextState]) {\n      this._remeasureMetricsOnActivation();\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {\n      this.touchableHandleLongPress && this.touchableHandleLongPress(e);\n    }\n\n    if (newIsHighlight && !curIsHighlight) {\n      this._startHighlight(e);\n    } else if (!newIsHighlight && curIsHighlight) {\n      this._endHighlight(e);\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {\n      const hasLongPressHandler = !!this.props.onLongPress;\n      const pressIsLongButStillCallOnPress =\n        IsLongPressingIn[curState] && // We *are* long pressing..\n        (!hasLongPressHandler || // But either has no long handler\n          !this.touchableLongPressCancelsPress()); // or we're told to ignore it.\n\n      const shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;\n      if (shouldInvokePress && this.touchableHandlePress) {\n        if (!newIsHighlight && !curIsHighlight) {\n          // we never highlighted because of delay, but we should highlight now\n          this._startHighlight(e);\n          this._endHighlight(e);\n        }\n        this.touchableHandlePress(e);\n      }\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.touchableDelayTimeout = null;\n  },\n\n  _startHighlight: function(e: Event) {\n    this._savePressInLocation(e);\n    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);\n  },\n\n  _endHighlight: function(e: Event) {\n    if (this.touchableHandleActivePressOut) {\n      if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {\n        this.pressOutDelayTimeout = setTimeout(() => {\n          this.touchableHandleActivePressOut(e);\n        }, this.touchableGetPressOutDelayMS());\n      } else {\n        this.touchableHandleActivePressOut(e);\n      }\n    }\n  },\n\n  // HACK (part 2): basic support for touchable interactions using a keyboard (including\n  // delays and longPress)\n  touchableHandleKeyEvent: function(e: Event) {\n    const ENTER = 13;\n    const SPACE = 32;\n    const { type, which } = e;\n    if (which === ENTER || which === SPACE) {\n      if (type === 'keydown') {\n        if (!this._isTouchableKeyboardActive) {\n          if (\n            !this.state.touchable.touchState ||\n            this.state.touchable.touchState === States.NOT_RESPONDER\n          ) {\n            this.touchableHandleResponderGrant(e);\n            this._isTouchableKeyboardActive = true;\n          }\n        }\n      } else if (type === 'keyup') {\n        if (this._isTouchableKeyboardActive) {\n          if (\n            this.state.touchable.touchState &&\n            this.state.touchable.touchState !== States.NOT_RESPONDER\n          ) {\n            this.touchableHandleResponderRelease(e);\n            this._isTouchableKeyboardActive = false;\n          }\n        }\n      }\n      e.stopPropagation();\n      // prevent the default behaviour unless the Touchable functions as a link\n      // and Enter is pressed\n      if (!(which === ENTER && AccessibilityUtil.propsToAriaRole(this.props) === 'link')) {\n        e.preventDefault();\n      }\n    }\n  }\n};\n\nconst Touchable = {\n  Mixin: TouchableMixin,\n  TOUCH_TARGET_DEBUG: false, // Highlights all touchable targets. Toggle with Inspector.\n  /**\n   * Renders a debugging overlay to visualize touch target with hitSlop (might not work on Android).\n   */\n  renderDebugView: ({ color, hitSlop }: Object) => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!Touchable.TOUCH_TARGET_DEBUG) {\n        return null;\n      }\n      const debugHitSlopStyle = {};\n      hitSlop = hitSlop || { top: 0, bottom: 0, left: 0, right: 0 };\n      for (const key in hitSlop) {\n        debugHitSlopStyle[key] = -hitSlop[key];\n      }\n      const hexColor = '#' + ('00000000' + normalizeColor(color).toString(16)).substr(-8);\n      return (\n        <View\n          pointerEvents=\"none\"\n          style={{\n            position: 'absolute',\n            borderColor: hexColor.slice(0, -2) + '55', // More opaque\n            borderWidth: 1,\n            borderStyle: 'dashed',\n            backgroundColor: hexColor.slice(0, -2) + '0F', // Less opaque\n            ...debugHitSlopStyle\n          }}\n        />\n      );\n    }\n  }\n};\n\nexport default Touchable;\n"]},"metadata":{},"sourceType":"module"}
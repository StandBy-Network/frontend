{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/home/user/Documents/StandByAssist/frontend/node_modules/@react-navigation/drawer/src/views/Drawer.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport View from \"react-native-web/dist/exports/View\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport { PanGestureHandler, TapGestureHandler, State } from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport Overlay from \"./Overlay\";\nvar Clock = Animated.Clock,\n    Value = Animated.Value,\n    onChange = Animated.onChange,\n    clockRunning = Animated.clockRunning,\n    startClock = Animated.startClock,\n    stopClock = Animated.stopClock,\n    spring = Animated.spring,\n    abs = Animated.abs,\n    add = Animated.add,\n    and = Animated.and,\n    block = Animated.block,\n    call = Animated.call,\n    cond = Animated.cond,\n    divide = Animated.divide,\n    eq = Animated.eq,\n    event = Animated.event,\n    greaterThan = Animated.greaterThan,\n    lessThan = Animated.lessThan,\n    max = Animated.max,\n    min = Animated.min,\n    multiply = Animated.multiply,\n    neq = Animated.neq,\n    or = Animated.or,\n    set = Animated.set,\n    sub = Animated.sub;\nvar TRUE = 1;\nvar FALSE = 0;\nvar NOOP = 0;\nvar UNSET = -1;\nvar DIRECTION_LEFT = 1;\nvar DIRECTION_RIGHT = -1;\nvar SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nvar ANIMATED_ONE = new Animated.Value(1);\n\nfunction shouldEnableGesture() {\n  if (Platform.OS === 'web' && typeof navigator !== 'undefined' && typeof window !== 'undefined') {\n    var isWebAppleDevice = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n    return !isWebAppleDevice;\n  }\n\n  return true;\n}\n\nvar DrawerView = function (_React$PureComponent) {\n  _inherits(DrawerView, _React$PureComponent);\n\n  var _super = _createSuper(DrawerView);\n\n  function DrawerView() {\n    var _this;\n\n    _classCallCheck(this, DrawerView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.handleEscape = function (e) {\n      var _this$props = _this.props,\n          open = _this$props.open,\n          onClose = _this$props.onClose;\n\n      if (e.key === 'Escape') {\n        if (open) {\n          onClose();\n        }\n      }\n    };\n\n    _this.handleEndInteraction = function () {\n      if (_this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    };\n\n    _this.handleStartInteraction = function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    };\n\n    _this.clock = new Clock();\n    _this.isDrawerTypeFront = new Value(_this.props.drawerType === 'front' ? TRUE : FALSE);\n    _this.isGestureEnabled = new Value(_this.props.gestureEnabled ? TRUE : FALSE);\n    _this.isOpen = new Value(_this.props.open ? TRUE : FALSE);\n    _this.nextIsOpen = new Value(UNSET);\n    _this.isSwiping = new Value(FALSE);\n    _this.gestureState = new Value(State.UNDETERMINED);\n    _this.touchX = new Value(0);\n    _this.velocityX = new Value(0);\n    _this.gestureX = new Value(0);\n    _this.offsetX = new Value(0);\n    _this.position = new Value(0);\n    _this.containerWidth = new Value(0);\n    _this.drawerWidth = new Value(0);\n    _this.drawerOpacity = new Value(0);\n    _this.drawerPosition = new Value(_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n    _this.touchDistanceFromDrawer = cond(_this.isDrawerTypeFront, cond(eq(_this.drawerPosition, DIRECTION_LEFT), max(sub(sub(_this.touchX, _this.gestureX), _this.drawerWidth), 0), min(multiply(sub(sub(_this.containerWidth, _this.drawerWidth), sub(_this.touchX, _this.gestureX)), DIRECTION_RIGHT), 0)), 0);\n    _this.swipeDistanceThreshold = new Value(_this.props.swipeDistanceThreshold !== undefined ? _this.props.swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT);\n    _this.swipeVelocityThreshold = new Value(_this.props.swipeVelocityThreshold);\n    _this.currentOpenValue = _this.props.open;\n    _this.isStatusBarHidden = false;\n    _this.manuallyTriggerSpring = new Value(FALSE);\n\n    _this.transitionTo = function (isOpen) {\n      var toValue = new Value(0);\n      var frameTime = new Value(0);\n      var state = {\n        position: _this.position,\n        time: new Value(0),\n        finished: new Value(FALSE),\n        velocity: new Value(0)\n      };\n      return block([cond(clockRunning(_this.clock), NOOP, [set(toValue, multiply(isOpen, _this.drawerWidth, _this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, _this.velocityX), set(_this.isOpen, isOpen), startClock(_this.clock), call([], _this.handleStartInteraction), set(_this.manuallyTriggerSpring, FALSE)]), spring(_this.clock, state, _objectSpread({}, SPRING_CONFIG, {\n        toValue: toValue\n      })), cond(state.finished, [set(_this.touchX, 0), set(_this.gestureX, 0), set(_this.velocityX, 0), set(_this.offsetX, 0), stopClock(_this.clock), call([_this.isOpen], function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            value = _ref2[0];\n\n        var open = Boolean(value);\n\n        _this.handleEndInteraction();\n\n        if (open !== _this.props.open) {\n          _this.toggleDrawer(_this.props.open);\n        }\n      })])]);\n    };\n\n    _this.dragX = block([onChange(_this.isOpen, call([_this.isOpen], function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n          value = _ref4[0];\n\n      var open = Boolean(value);\n      _this.currentOpenValue = open;\n\n      if (open !== _this.props.open) {\n        if (open) {\n          _this.props.onOpen();\n        } else {\n          _this.props.onClose();\n        }\n\n        _this.pendingOpenValue = open;\n\n        _this.forceUpdate();\n      }\n    })), onChange(_this.nextIsOpen, cond(neq(_this.nextIsOpen, UNSET), [cond(clockRunning(_this.clock), stopClock(_this.clock)), set(_this.isOpen, _this.nextIsOpen), set(_this.gestureX, 0), set(_this.nextIsOpen, UNSET)])), onChange(_this.isSwiping, call([_this.isSwiping], function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 1),\n          value = _ref6[0];\n\n      var keyboardDismissMode = _this.props.keyboardDismissMode;\n\n      if (value === TRUE) {\n        if (keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n\n        _this.toggleStatusBar(true);\n      } else {\n        _this.toggleStatusBar(_this.currentOpenValue);\n      }\n    })), onChange(_this.gestureState, cond(eq(_this.gestureState, State.ACTIVE), call([], _this.handleStartInteraction))), cond(eq(_this.gestureState, State.ACTIVE), [cond(_this.isSwiping, NOOP, [set(_this.isSwiping, TRUE), set(_this.offsetX, _this.position)]), set(_this.position, add(_this.offsetX, _this.gestureX, _this.touchDistanceFromDrawer)), stopClock(_this.clock)], [set(_this.isSwiping, FALSE), set(_this.touchX, 0), _this.transitionTo(cond(_this.manuallyTriggerSpring, _this.isOpen, cond(or(and(greaterThan(abs(_this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(_this.velocityX), _this.swipeVelocityThreshold)), greaterThan(abs(_this.gestureX), _this.swipeDistanceThreshold)), cond(eq(_this.drawerPosition, DIRECTION_LEFT), greaterThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0), lessThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0)), _this.isOpen)))]), _this.position]);\n    _this.translateX = cond(eq(_this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(_this.drawerWidth, -1), _this.dragX), 0), max(min(_this.drawerWidth, _this.dragX), 0));\n    _this.progress = cond(eq(_this.drawerWidth, 0), 0, abs(divide(_this.translateX, _this.drawerWidth)));\n    _this.handleGestureEvent = event([{\n      nativeEvent: {\n        x: _this.touchX,\n        translationX: _this.gestureX,\n        velocityX: _this.velocityX\n      }\n    }]);\n    _this.handleGestureStateChange = event([{\n      nativeEvent: {\n        state: function state(s) {\n          return set(_this.gestureState, s);\n        }\n      }\n    }]);\n    _this.handleTapStateChange = event([{\n      nativeEvent: {\n        oldState: function oldState(s) {\n          return cond(eq(s, State.ACTIVE), set(_this.manuallyTriggerSpring, TRUE));\n        }\n      }\n    }]);\n\n    _this.handleContainerLayout = function (e) {\n      return _this.containerWidth.setValue(e.nativeEvent.layout.width);\n    };\n\n    _this.handleDrawerLayout = function (e) {\n      _this.drawerWidth.setValue(e.nativeEvent.layout.width);\n\n      _this.toggleDrawer(_this.props.open);\n\n      requestAnimationFrame(function () {\n        return requestAnimationFrame(function () {\n          return _this.drawerOpacity.setValue(1);\n        });\n      });\n    };\n\n    _this.toggleDrawer = function (open) {\n      if (_this.currentOpenValue !== open) {\n        _this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n        _this.currentOpenValue = open;\n      }\n    };\n\n    _this.toggleStatusBar = function (hidden) {\n      var _this$props2 = _this.props,\n          hideStatusBar = _this$props2.hideStatusBar,\n          statusBarAnimation = _this$props2.statusBarAnimation;\n\n      if (hideStatusBar && _this.isStatusBarHidden !== hidden) {\n        _this.isStatusBarHidden = hidden;\n        StatusBar.setHidden(hidden, statusBarAnimation);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(DrawerView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (Platform.OS === 'web') {\n        var _document, _document$body;\n\n        (_document = document) == null ? void 0 : (_document$body = _document.body) == null ? void 0 : _document$body.addEventListener == null ? void 0 : _document$body.addEventListener('keyup', this.handleEscape);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n          open = _this$props3.open,\n          drawerPosition = _this$props3.drawerPosition,\n          drawerType = _this$props3.drawerType,\n          gestureEnabled = _this$props3.gestureEnabled,\n          swipeDistanceThreshold = _this$props3.swipeDistanceThreshold,\n          swipeVelocityThreshold = _this$props3.swipeVelocityThreshold,\n          hideStatusBar = _this$props3.hideStatusBar;\n\n      if (prevProps.gestureEnabled !== gestureEnabled) {\n        this.isGestureEnabled.setValue(gestureEnabled ? TRUE : FALSE);\n      }\n\n      if (typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n        this.toggleDrawer(open);\n      }\n\n      this.pendingOpenValue = undefined;\n\n      if (open !== prevProps.open && hideStatusBar) {\n        this.toggleStatusBar(open);\n      }\n\n      if (prevProps.drawerPosition !== drawerPosition) {\n        this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n      }\n\n      if (prevProps.drawerType !== drawerType) {\n        this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n      }\n\n      if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n        this.swipeDistanceThreshold.setValue(swipeDistanceThreshold !== undefined ? swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT);\n      }\n\n      if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n        this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.toggleStatusBar(false);\n      this.handleEndInteraction();\n\n      if (Platform.OS === 'web') {\n        var _document2, _document2$body;\n\n        (_document2 = document) == null ? void 0 : (_document2$body = _document2.body) == null ? void 0 : _document2$body.removeEventListener == null ? void 0 : _document2$body.removeEventListener('keyup', this.handleEscape);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props4 = this.props,\n          open = _this$props4.open,\n          gestureEnabled = _this$props4.gestureEnabled,\n          drawerPosition = _this$props4.drawerPosition,\n          drawerType = _this$props4.drawerType,\n          swipeEdgeWidth = _this$props4.swipeEdgeWidth,\n          sceneContainerStyle = _this$props4.sceneContainerStyle,\n          drawerStyle = _this$props4.drawerStyle,\n          overlayStyle = _this$props4.overlayStyle,\n          onGestureRef = _this$props4.onGestureRef,\n          renderDrawerContent = _this$props4.renderDrawerContent,\n          renderSceneContent = _this$props4.renderSceneContent,\n          gestureHandlerProps = _this$props4.gestureHandlerProps;\n      var isOpen = drawerType === 'permanent' ? true : open;\n      var isRight = drawerPosition === 'right';\n      var contentTranslateX = drawerType === 'front' ? 0 : this.translateX;\n      var drawerTranslateX = drawerType === 'back' ? I18nManager.isRTL ? multiply(sub(this.containerWidth, this.drawerWidth), isRight ? 1 : -1) : 0 : this.translateX;\n      var offset = drawerType === 'back' ? 0 : I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);\n      var hitSlop = isRight ? {\n        right: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      } : {\n        left: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      };\n      var progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n      return React.createElement(PanGestureHandler, _extends({\n        ref: onGestureRef,\n        activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        onGestureEvent: this.handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange,\n        hitSlop: hitSlop,\n        enabled: drawerType !== 'permanent' && gestureEnabled\n      }, gestureHandlerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 7\n        }\n      }), React.createElement(Animated.View, {\n        onLayout: this.handleContainerLayout,\n        style: [styles.main, {\n          flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 9\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.content, drawerType !== 'permanent' && {\n          transform: [{\n            translateX: contentTranslateX\n          }]\n        }, sceneContainerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 11\n        }\n      }, React.createElement(View, {\n        accessibilityElementsHidden: isOpen,\n        importantForAccessibility: isOpen ? 'no-hide-descendants' : 'auto',\n        style: styles.content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 13\n        }\n      }, renderSceneContent({\n        progress: progress\n      })), drawerType === 'permanent' ? null : React.createElement(TapGestureHandler, {\n        enabled: gestureEnabled,\n        onHandlerStateChange: this.handleTapStateChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 15\n        }\n      }, React.createElement(Overlay, {\n        progress: progress,\n        style: overlayStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 17\n        }\n      }))), drawerType === 'permanent' ? null : React.createElement(Animated.Code, {\n        exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], function () {\n          return _this2.currentOpenValue = false;\n        })])])]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 13\n        }\n      }), React.createElement(Animated.View, {\n        accessibilityViewIsModal: isOpen,\n        removeClippedSubviews: Platform.OS !== 'ios',\n        onLayout: this.handleDrawerLayout,\n        style: [styles.container, drawerType === 'permanent' ? isRight ? {\n          right: 0\n        } : {\n          left: 0\n        } : [styles.nonPermanent, {\n          transform: [{\n            translateX: drawerTranslateX\n          }],\n          opacity: this.drawerOpacity\n        }, isRight ? {\n          right: offset\n        } : {\n          left: offset\n        }, {\n          zIndex: drawerType === 'back' ? -1 : 0\n        }], drawerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 11\n        }\n      }, renderDrawerContent({\n        progress: progress\n      }))));\n    }\n  }]);\n\n  return DrawerView;\n}(React.PureComponent);\n\nDrawerView.defaultProps = {\n  drawerPostion: I18nManager.isRTL ? 'left' : 'right',\n  drawerType: 'front',\n  gestureEnabled: shouldEnableGesture(),\n  swipeEdgeWidth: 32,\n  swipeVelocityThreshold: 500,\n  keyboardDismissMode: 'on-drag',\n  hideStatusBar: false,\n  statusBarAnimation: 'slide'\n};\nexport { DrawerView as default };\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%'\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%'\n  },\n  content: {\n    flex: 1\n  },\n  main: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["/home/user/Documents/StandByAssist/frontend/node_modules/@react-navigation/drawer/src/views/Drawer.tsx"],"names":["React","PanGestureHandler","TapGestureHandler","State","Animated","Overlay","Clock","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ONE","shouldEnableGesture","Platform","OS","navigator","window","isWebAppleDevice","test","userAgent","MSStream","DrawerView","handleEscape","e","props","open","onClose","key","handleEndInteraction","interactionHandle","undefined","InteractionManager","clearInteractionHandle","handleStartInteraction","createInteractionHandle","clock","isDrawerTypeFront","drawerType","isGestureEnabled","gestureEnabled","isOpen","nextIsOpen","isSwiping","gestureState","UNDETERMINED","touchX","velocityX","gestureX","offsetX","position","containerWidth","drawerWidth","drawerOpacity","drawerPosition","touchDistanceFromDrawer","swipeDistanceThreshold","swipeVelocityThreshold","currentOpenValue","isStatusBarHidden","manuallyTriggerSpring","transitionTo","toValue","frameTime","state","time","finished","velocity","value","Boolean","toggleDrawer","dragX","onOpen","pendingOpenValue","forceUpdate","keyboardDismissMode","Keyboard","dismiss","toggleStatusBar","ACTIVE","translateX","progress","handleGestureEvent","nativeEvent","x","translationX","handleGestureStateChange","s","handleTapStateChange","oldState","handleContainerLayout","setValue","layout","width","handleDrawerLayout","requestAnimationFrame","hidden","hideStatusBar","statusBarAnimation","StatusBar","setHidden","document","body","addEventListener","prevProps","removeEventListener","swipeEdgeWidth","sceneContainerStyle","drawerStyle","overlayStyle","onGestureRef","renderDrawerContent","renderSceneContent","gestureHandlerProps","isRight","contentTranslateX","drawerTranslateX","I18nManager","isRTL","offset","hitSlop","right","left","styles","main","flexDirection","content","transform","container","nonPermanent","opacity","zIndex","PureComponent","defaultProps","drawerPostion","StyleSheet","create","backgroundColor","maxWidth","top","bottom","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n  StyleProp,\n  View,\n  InteractionManager,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  State,\n} from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  onGestureRef?: (ref: PanGestureHandler | null) => void;\n  gestureEnabled: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide' | 'permanent';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: StyleProp<ViewStyle>;\n  drawerStyle?: StyleProp<ViewStyle>;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\n/**\n * Disables the pan gesture by default on Apple devices in the browser.\n * https://stackoverflow.com/a/9039885\n */\nfunction shouldEnableGesture(): boolean {\n  if (\n    Platform.OS === 'web' &&\n    typeof navigator !== 'undefined' &&\n    typeof window !== 'undefined'\n  ) {\n    const isWebAppleDevice =\n      /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n\n    return !isWebAppleDevice;\n  }\n\n  return true;\n}\n\nexport default class DrawerView extends React.PureComponent<Props> {\n  static defaultProps = {\n    drawerPostion: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    gestureEnabled: shouldEnableGesture(),\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidMount() {\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', this.handleEscape);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      gestureEnabled,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (prevProps.gestureEnabled !== gestureEnabled) {\n      this.isGestureEnabled.setValue(gestureEnabled ? TRUE : FALSE);\n    }\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n\n    if (Platform.OS === 'web') {\n      document?.body?.removeEventListener?.('keyup', this.handleEscape);\n    }\n  }\n\n  private handleEscape = (e: KeyboardEvent) => {\n    const { open, onClose } = this.props;\n\n    if (e.key === 'Escape') {\n      if (open) {\n        onClose();\n      }\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n  private isGestureEnabled = new Value(\n    this.props.gestureEnabled ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private gestureState = new Value<number>(State.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(0);\n\n  private containerWidth = new Value<number>(0);\n  private drawerWidth = new Value<number>(0);\n  private drawerOpacity = new Value<number>(0);\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, State.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, State.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(eq(s, State.ACTIVE), set(this.manuallyTriggerSpring, TRUE)),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      onGestureRef,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX = drawerType === 'front' ? 0 : this.translateX;\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : 0\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <PanGestureHandler\n        ref={onGestureRef}\n        activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        onGestureEvent={this.handleGestureEvent}\n        onHandlerStateChange={this.handleGestureStateChange}\n        hitSlop={hitSlop}\n        enabled={drawerType !== 'permanent' && gestureEnabled}\n        {...gestureHandlerProps}\n      >\n        <Animated.View\n          onLayout={this.handleContainerLayout}\n          style={[\n            styles.main,\n            {\n              flexDirection:\n                drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row',\n            },\n          ]}\n        >\n          <Animated.View\n            style={[\n              styles.content,\n              drawerType !== 'permanent' && {\n                transform: [{ translateX: contentTranslateX }],\n              },\n              sceneContainerStyle as any,\n            ]}\n          >\n            <View\n              accessibilityElementsHidden={isOpen}\n              importantForAccessibility={\n                isOpen ? 'no-hide-descendants' : 'auto'\n              }\n              style={styles.content}\n            >\n              {renderSceneContent({ progress })}\n            </View>\n            {// Disable overlay if sidebar is permanent\n            drawerType === 'permanent' ? null : (\n              <TapGestureHandler\n                enabled={gestureEnabled}\n                onHandlerStateChange={this.handleTapStateChange}\n              >\n                <Overlay progress={progress} style={overlayStyle} />\n              </TapGestureHandler>\n            )}\n          </Animated.View>\n          {drawerType === 'permanent' ? null : (\n            <Animated.Code\n              exec={block([\n                onChange(this.manuallyTriggerSpring, [\n                  cond(eq(this.manuallyTriggerSpring, TRUE), [\n                    set(this.nextIsOpen, FALSE),\n                    call([], () => (this.currentOpenValue = false)),\n                  ]),\n                ]),\n              ])}\n            />\n          )}\n          <Animated.View\n            accessibilityViewIsModal={isOpen}\n            removeClippedSubviews={Platform.OS !== 'ios'}\n            onLayout={this.handleDrawerLayout}\n            style={[\n              styles.container,\n              drawerType === 'permanent'\n                ? // Without this, the `left`/`right` values don't get reset\n                  isRight\n                  ? { right: 0 }\n                  : { left: 0 }\n                : [\n                    styles.nonPermanent,\n                    {\n                      transform: [{ translateX: drawerTranslateX }],\n                      opacity: this.drawerOpacity,\n                    },\n                    isRight ? { right: offset } : { left: offset },\n                    { zIndex: drawerType === 'back' ? -1 : 0 },\n                  ],\n              drawerStyle as any,\n            ]}\n          >\n            {renderDrawerContent({ progress })}\n          </Animated.View>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%',\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
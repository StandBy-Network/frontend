{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/home/user/Documents/StandByAssist/frontend/node_modules/@react-navigation/drawer/src/views/DrawerItemList.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { CommonActions, DrawerActions } from '@react-navigation/native';\nimport DrawerItem from \"./DrawerItem\";\nexport default function DrawerItemList(_ref) {\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors,\n      activeTintColor = _ref.activeTintColor,\n      inactiveTintColor = _ref.inactiveTintColor,\n      activeBackgroundColor = _ref.activeBackgroundColor,\n      inactiveBackgroundColor = _ref.inactiveBackgroundColor,\n      itemStyle = _ref.itemStyle,\n      labelStyle = _ref.labelStyle;\n  return state.routes.map(function (route, i) {\n    var focused = i === state.index;\n    var _descriptors$route$ke = descriptors[route.key].options,\n        title = _descriptors$route$ke.title,\n        drawerLabel = _descriptors$route$ke.drawerLabel,\n        drawerIcon = _descriptors$route$ke.drawerIcon;\n    return React.createElement(DrawerItem, {\n      key: route.key,\n      label: drawerLabel !== undefined ? drawerLabel : title !== undefined ? title : route.name,\n      icon: drawerIcon,\n      focused: focused,\n      activeTintColor: activeTintColor,\n      inactiveTintColor: inactiveTintColor,\n      activeBackgroundColor: activeBackgroundColor,\n      inactiveBackgroundColor: inactiveBackgroundColor,\n      labelStyle: labelStyle,\n      style: itemStyle,\n      onPress: function onPress() {\n        navigation.dispatch(_objectSpread({}, focused ? DrawerActions.closeDrawer() : CommonActions.navigate(route.name), {\n          target: state.key\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    });\n  });\n}","map":{"version":3,"sources":["/home/user/Documents/StandByAssist/frontend/node_modules/@react-navigation/drawer/src/views/DrawerItemList.tsx"],"names":["React","CommonActions","DrawerActions","DrawerItem","DrawerItemList","state","navigation","descriptors","activeTintColor","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","itemStyle","labelStyle","routes","map","route","i","focused","index","key","options","title","drawerLabel","drawerIcon","undefined","name","dispatch","closeDrawer","navigate","target"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,aADF,EAEEC,aAFF,QAIO,0BAJP;AAKA,OAAOC,UAAP;AAgBA,eAAe,SAASC,cAAT,OAUL;AAAA,MATRC,KASQ,QATRA,KASQ;AAAA,MARRC,UAQQ,QARRA,UAQQ;AAAA,MAPRC,WAOQ,QAPRA,WAOQ;AAAA,MANRC,eAMQ,QANRA,eAMQ;AAAA,MALRC,iBAKQ,QALRA,iBAKQ;AAAA,MAJRC,qBAIQ,QAJRA,qBAIQ;AAAA,MAHRC,uBAGQ,QAHRA,uBAGQ;AAAA,MAFRC,SAEQ,QAFRA,SAEQ;AAAA,MADRC,UACQ,QADRA,UACQ;AACR,SAAQR,KAAK,CAACS,MAAN,CAAaC,GAAb,CAAiB,UAACC,KAAD,EAAQC,CAAR,EAAc;AACrC,QAAMC,OAAO,GAAGD,CAAC,KAAKZ,KAAK,CAACc,KAA5B;AADqC,gCAEMZ,WAAW,CAACS,KAAK,CAACI,GAAP,CAAX,CAAuBC,OAF7B;AAAA,QAE7BC,KAF6B,yBAE7BA,KAF6B;AAAA,QAEtBC,WAFsB,yBAEtBA,WAFsB;AAAA,QAETC,UAFS,yBAETA,UAFS;AAIrC,WACE,oBAAC,UAAD;AACE,MAAA,GAAG,EAAER,KAAK,CAACI,GADb;AAEE,MAAA,KAAK,EACHG,WAAW,KAAKE,SAAhB,GACIF,WADJ,GAEID,KAAK,KAAKG,SAAV,GACAH,KADA,GAEAN,KAAK,CAACU,IAPd;AASE,MAAA,IAAI,EAAEF,UATR;AAUE,MAAA,OAAO,EAAEN,OAVX;AAWE,MAAA,eAAe,EAAEV,eAXnB;AAYE,MAAA,iBAAiB,EAAEC,iBAZrB;AAaE,MAAA,qBAAqB,EAAEC,qBAbzB;AAcE,MAAA,uBAAuB,EAAEC,uBAd3B;AAeE,MAAA,UAAU,EAAEE,UAfd;AAgBE,MAAA,KAAK,EAAED,SAhBT;AAiBE,MAAA,OAAO,EAAE,mBAAM;AACbN,QAAAA,UAAU,CAACqB,QAAX,mBACMT,OAAO,GACPhB,aAAa,CAAC0B,WAAd,EADO,GAEP3B,aAAa,CAAC4B,QAAd,CAAuBb,KAAK,CAACU,IAA7B,CAHN;AAIEI,UAAAA,MAAM,EAAEzB,KAAK,CAACe;AAJhB;AAMD,OAxBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AA4BD,GAhCO,CAAR;AAiCD","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  DrawerActions,\n  DrawerNavigationState,\n} from '@react-navigation/native';\nimport DrawerItem from './DrawerItem';\nimport {\n  DrawerNavigationHelpers,\n  DrawerDescriptorMap,\n  DrawerContentOptions,\n} from '../types';\n\ntype Props = Omit<DrawerContentOptions, 'contentContainerStyle' | 'style'> & {\n  state: DrawerNavigationState;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList({\n  state,\n  navigation,\n  descriptors,\n  activeTintColor,\n  inactiveTintColor,\n  activeBackgroundColor,\n  inactiveBackgroundColor,\n  itemStyle,\n  labelStyle,\n}: Props) {\n  return (state.routes.map((route, i) => {\n    const focused = i === state.index;\n    const { title, drawerLabel, drawerIcon } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n            ? title\n            : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        activeBackgroundColor={activeBackgroundColor}\n        inactiveBackgroundColor={inactiveBackgroundColor}\n        labelStyle={labelStyle}\n        style={itemStyle}\n        onPress={() => {\n          navigation.dispatch({\n            ...(focused\n              ? DrawerActions.closeDrawer()\n              : CommonActions.navigate(route.name)),\n            target: state.key,\n          });\n        }}\n      />\n    );\n  }) as React.ReactNode) as React.ReactElement;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/home/user/Documents/StandByAssist/frontend/node_modules/@react-navigation/drawer/src/views/DrawerView.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport { ScreenContainer } from 'react-native-screens';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { DrawerActions, useTheme } from '@react-navigation/native';\nimport DrawerGestureContext from \"../utils/DrawerGestureContext\";\nimport SafeAreaProviderCompat from \"./SafeAreaProviderCompat\";\nimport ResourceSavingScene from \"./ResourceSavingScene\";\nimport DrawerContent from \"./DrawerContent\";\nimport Drawer from \"./Drawer\";\nimport DrawerOpenContext from \"../utils/DrawerOpenContext\";\nimport DrawerPositionContext from \"../utils/DrawerPositionContext\";\n\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n      width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nvar GestureHandlerWrapper = GestureHandlerRootView != null ? GestureHandlerRootView : View;\nexport default function DrawerView(_ref2) {\n  var state = _ref2.state,\n      navigation = _ref2.navigation,\n      descriptors = _ref2.descriptors,\n      _ref2$lazy = _ref2.lazy,\n      lazy = _ref2$lazy === void 0 ? true : _ref2$lazy,\n      _ref2$drawerContent = _ref2.drawerContent,\n      drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n    return React.createElement(DrawerContent, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 5\n      }\n    }));\n  } : _ref2$drawerContent,\n      _ref2$drawerPosition = _ref2.drawerPosition,\n      drawerPosition = _ref2$drawerPosition === void 0 ? I18nManager.isRTL ? 'right' : 'left' : _ref2$drawerPosition,\n      _ref2$keyboardDismiss = _ref2.keyboardDismissMode,\n      keyboardDismissMode = _ref2$keyboardDismiss === void 0 ? 'on-drag' : _ref2$keyboardDismiss,\n      _ref2$overlayColor = _ref2.overlayColor,\n      overlayColor = _ref2$overlayColor === void 0 ? 'rgba(0, 0, 0, 0.5)' : _ref2$overlayColor,\n      _ref2$drawerType = _ref2.drawerType,\n      drawerType = _ref2$drawerType === void 0 ? 'front' : _ref2$drawerType,\n      _ref2$hideStatusBar = _ref2.hideStatusBar,\n      hideStatusBar = _ref2$hideStatusBar === void 0 ? false : _ref2$hideStatusBar,\n      _ref2$statusBarAnimat = _ref2.statusBarAnimation,\n      statusBarAnimation = _ref2$statusBarAnimat === void 0 ? 'slide' : _ref2$statusBarAnimat,\n      drawerContentOptions = _ref2.drawerContentOptions,\n      drawerStyle = _ref2.drawerStyle,\n      edgeWidth = _ref2.edgeWidth,\n      gestureHandlerProps = _ref2.gestureHandlerProps,\n      minSwipeDistance = _ref2.minSwipeDistance,\n      sceneContainerStyle = _ref2.sceneContainerStyle;\n\n  var _React$useState = React.useState([state.index]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loaded = _React$useState2[0],\n      setLoaded = _React$useState2[1];\n\n  var _React$useState3 = React.useState(function () {\n    var _Dimensions$get = Dimensions.get('window'),\n        _Dimensions$get$heigh = _Dimensions$get.height,\n        height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n        _Dimensions$get$width = _Dimensions$get.width,\n        width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n\n    return getDefaultDrawerWidth({\n      height: height,\n      width: width\n    });\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      drawerWidth = _React$useState4[0],\n      setDrawerWidth = _React$useState4[1];\n\n  var drawerGestureRef = React.useRef(null);\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var isDrawerOpen = state.history.some(function (it) {\n    return it.type === 'drawer';\n  });\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(_objectSpread({}, DrawerActions.openDrawer(), {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(_objectSpread({}, DrawerActions.closeDrawer(), {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (isDrawerOpen) {\n      navigation.emit({\n        type: 'drawerOpen'\n      });\n    } else {\n      navigation.emit({\n        type: 'drawerClose'\n      });\n    }\n  }, [isDrawerOpen, navigation]);\n  React.useEffect(function () {\n    var subscription;\n\n    if (isDrawerOpen) {\n      subscription = BackHandler.addEventListener('hardwareBackPress', function () {\n        handleDrawerClose();\n        return true;\n      });\n    }\n\n    return function () {\n      var _subscription;\n\n      return (_subscription = subscription) == null ? void 0 : _subscription.remove();\n    };\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n  React.useEffect(function () {\n    var updateWidth = function updateWidth(_ref3) {\n      var window = _ref3.window;\n      setDrawerWidth(getDefaultDrawerWidth(window));\n    };\n\n    Dimensions.addEventListener('change', updateWidth);\n    return function () {\n      return Dimensions.removeEventListener('change', updateWidth);\n    };\n  }, []);\n\n  if (!loaded.includes(state.index)) {\n    setLoaded([].concat(_toConsumableArray(loaded), [state.index]));\n  }\n\n  var renderNavigationView = function renderNavigationView(_ref4) {\n    var progress = _ref4.progress;\n    return React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 7\n      }\n    }, drawerContent(_objectSpread({}, drawerContentOptions, {\n      progress: progress,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    })));\n  };\n\n  var renderContent = function renderContent() {\n    return React.createElement(ScreenContainer, {\n      style: styles.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 7\n      }\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var unmountOnBlur = descriptor.options.unmountOnBlur;\n      var isFocused = state.index === index;\n\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n\n      if (lazy && !loaded.includes(index) && !isFocused) {\n        return null;\n      }\n\n      return React.createElement(ResourceSavingScene, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          opacity: isFocused ? 1 : 0\n        }],\n        isVisible: isFocused,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }\n      }, descriptor.render());\n    }));\n  };\n\n  var activeKey = state.routes[state.index].key;\n  var gestureEnabled = descriptors[activeKey].options.gestureEnabled;\n  return React.createElement(GestureHandlerWrapper, {\n    style: styles.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 5\n    }\n  }, React.createElement(SafeAreaProviderCompat, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }\n  }, React.createElement(DrawerGestureContext.Provider, {\n    value: drawerGestureRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }, React.createElement(DrawerOpenContext.Provider, {\n    value: isDrawerOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 11\n    }\n  }, React.createElement(Drawer, {\n    open: isDrawerOpen,\n    gestureEnabled: gestureEnabled,\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    onGestureRef: function onGestureRef(ref) {\n      drawerGestureRef.current = ref;\n    },\n    gestureHandlerProps: gestureHandlerProps,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle],\n    drawerStyle: [{\n      width: drawerWidth,\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    swipeEdgeWidth: edgeWidth,\n    swipeDistanceThreshold: minSwipeDistance,\n    hideStatusBar: hideStatusBar,\n    statusBarAnimation: statusBarAnimation,\n    renderDrawerContent: renderNavigationView,\n    renderSceneContent: renderContent,\n    keyboardDismissMode: keyboardDismissMode,\n    drawerPostion: drawerPosition,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }\n  })))));\n}\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["/home/user/Documents/StandByAssist/frontend/node_modules/@react-navigation/drawer/src/views/DrawerView.tsx"],"names":["React","ScreenContainer","GestureHandlerRootView","DrawerActions","useTheme","DrawerGestureContext","SafeAreaProviderCompat","ResourceSavingScene","DrawerContent","Drawer","DrawerOpenContext","DrawerPositionContext","getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","GestureHandlerWrapper","View","DrawerView","state","navigation","descriptors","lazy","drawerContent","props","drawerPosition","I18nManager","isRTL","keyboardDismissMode","overlayColor","drawerType","hideStatusBar","statusBarAnimation","drawerContentOptions","drawerStyle","edgeWidth","gestureHandlerProps","minSwipeDistance","sceneContainerStyle","useState","index","loaded","setLoaded","Dimensions","get","drawerWidth","setDrawerWidth","drawerGestureRef","useRef","colors","isDrawerOpen","history","some","it","type","handleDrawerOpen","useCallback","dispatch","openDrawer","target","key","handleDrawerClose","closeDrawer","useEffect","emit","subscription","BackHandler","addEventListener","remove","updateWidth","window","removeEventListener","includes","renderNavigationView","progress","renderContent","styles","content","routes","map","route","descriptor","unmountOnBlur","options","isFocused","StyleSheet","absoluteFill","opacity","render","activeKey","gestureEnabled","ref","current","backgroundColor","background","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Dimensions,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  ScaledSize,\n  BackHandler,\n  NativeEventSubscription,\n} from 'react-native';\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer } from 'react-native-screens';\nimport {\n  PanGestureHandler,\n  GestureHandlerRootView,\n} from 'react-native-gesture-handler';\nimport {\n  DrawerNavigationState,\n  DrawerActions,\n  useTheme,\n} from '@react-navigation/native';\n\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n} from '../types';\nimport DrawerOpenContext from '../utils/DrawerOpenContext';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/guidelines/patterns/navigation-drawer.html\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.index]);\n  const [drawerWidth, setDrawerWidth] = React.useState(() => {\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    return getDefaultDrawerWidth({ height, width });\n  });\n\n  const drawerGestureRef = React.useRef<PanGestureHandler>(null);\n\n  const { colors } = useTheme();\n\n  const isDrawerOpen = state.history.some(it => it.type === 'drawer');\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (isDrawerOpen) {\n      navigation.emit({ type: 'drawerOpen' });\n    } else {\n      navigation.emit({ type: 'drawerClose' });\n    }\n  }, [isDrawerOpen, navigation]);\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (isDrawerOpen) {\n      // We only add the subscription when drawer opens\n      // This way we can make sure that the subscription is added as late as possible\n      // This will make sure that our handler will run first when back button is pressed\n      subscription = BackHandler.addEventListener('hardwareBackPress', () => {\n        handleDrawerClose();\n\n        return true;\n      });\n    }\n\n    return () => subscription?.remove();\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n\n  React.useEffect(() => {\n    const updateWidth = ({ window }: { window: ScaledSize }) => {\n      setDrawerWidth(getDefaultDrawerWidth(window));\n    };\n\n    Dimensions.addEventListener('change', updateWidth);\n\n    return () => Dimensions.removeEventListener('change', updateWidth);\n  }, []);\n\n  if (!loaded.includes(state.index)) {\n    setLoaded([...loaded, state.index]);\n  }\n\n  const renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          ...drawerContentOptions,\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderContent = () => {\n    return (\n      <ScreenContainer style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(index) && !isFocused) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n            >\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled } = descriptors[activeKey].options;\n\n  return (\n    <GestureHandlerWrapper style={styles.content}>\n      <SafeAreaProviderCompat>\n        <DrawerGestureContext.Provider value={drawerGestureRef}>\n          <DrawerOpenContext.Provider value={isDrawerOpen}>\n            <Drawer\n              open={isDrawerOpen}\n              gestureEnabled={gestureEnabled}\n              onOpen={handleDrawerOpen}\n              onClose={handleDrawerClose}\n              onGestureRef={ref => {\n                // @ts-ignore\n                drawerGestureRef.current = ref;\n              }}\n              gestureHandlerProps={gestureHandlerProps}\n              drawerType={drawerType}\n              drawerPosition={drawerPosition}\n              sceneContainerStyle={[\n                { backgroundColor: colors.background },\n                sceneContainerStyle,\n              ]}\n              drawerStyle={[\n                { width: drawerWidth, backgroundColor: colors.card },\n                drawerType === 'permanent' &&\n                  (drawerPosition === 'left'\n                    ? {\n                        borderRightColor: colors.border,\n                        borderRightWidth: StyleSheet.hairlineWidth,\n                      }\n                    : {\n                        borderLeftColor: colors.border,\n                        borderLeftWidth: StyleSheet.hairlineWidth,\n                      }),\n                drawerStyle,\n              ]}\n              overlayStyle={{ backgroundColor: overlayColor }}\n              swipeEdgeWidth={edgeWidth}\n              swipeDistanceThreshold={minSwipeDistance}\n              hideStatusBar={hideStatusBar}\n              statusBarAnimation={statusBarAnimation}\n              renderDrawerContent={renderNavigationView}\n              renderSceneContent={renderContent}\n              keyboardDismissMode={keyboardDismissMode}\n              drawerPostion={drawerPosition}\n            />\n          </DrawerOpenContext.Provider>\n        </DrawerGestureContext.Provider>\n      </SafeAreaProviderCompat>\n    </GestureHandlerWrapper>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
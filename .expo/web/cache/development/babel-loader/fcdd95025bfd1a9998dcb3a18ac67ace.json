{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/home/user/Documents/StandByAssist/frontend/node_modules/@react-navigation/drawer/src/views/DrawerItem.tsx\";\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TouchableItem from \"./TouchableItem\";\nexport default function DrawerItem(props) {\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var icon = props.icon,\n      label = props.label,\n      labelStyle = props.labelStyle,\n      _props$focused = props.focused,\n      focused = _props$focused === void 0 ? false : _props$focused,\n      _props$activeTintColo = props.activeTintColor,\n      activeTintColor = _props$activeTintColo === void 0 ? colors.primary : _props$activeTintColo,\n      _props$inactiveTintCo = props.inactiveTintColor,\n      inactiveTintColor = _props$inactiveTintCo === void 0 ? Color(colors.text).alpha(0.68).rgb().string() : _props$inactiveTintCo,\n      _props$activeBackgrou = props.activeBackgroundColor,\n      activeBackgroundColor = _props$activeBackgrou === void 0 ? Color(activeTintColor).alpha(0.12).rgb().string() : _props$activeBackgrou,\n      _props$inactiveBackgr = props.inactiveBackgroundColor,\n      inactiveBackgroundColor = _props$inactiveBackgr === void 0 ? 'transparent' : _props$inactiveBackgr,\n      style = props.style,\n      onPress = props.onPress,\n      rest = _objectWithoutProperties(props, [\"icon\", \"label\", \"labelStyle\", \"focused\", \"activeTintColor\", \"inactiveTintColor\", \"activeBackgroundColor\", \"inactiveBackgroundColor\", \"style\", \"onPress\"]);\n\n  var _StyleSheet$flatten = StyleSheet.flatten(style || {}),\n      _StyleSheet$flatten$b = _StyleSheet$flatten.borderRadius,\n      borderRadius = _StyleSheet$flatten$b === void 0 ? 4 : _StyleSheet$flatten$b;\n\n  var color = focused ? activeTintColor : inactiveTintColor;\n  var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  var iconNode = icon ? icon({\n    size: 24,\n    focused: focused,\n    color: color\n  }) : null;\n  return React.createElement(View, _extends({\n    collapsable: false\n  }, rest, {\n    style: [styles.container, {\n      borderRadius: borderRadius,\n      backgroundColor: backgroundColor\n    }, style],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }), React.createElement(TouchableItem, {\n    delayPressIn: 0,\n    onPress: onPress,\n    style: [styles.wrapper, {\n      borderRadius: borderRadius\n    }],\n    accessibilityTraits: focused ? ['button', 'selected'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityStates: focused ? ['selected'] : [],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, iconNode, React.createElement(View, {\n    style: [styles.label, {\n      marginLeft: iconNode ? 32 : 0,\n      marginVertical: 5\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, typeof label === 'string' ? React.createElement(Text, {\n    numberOfLines: 1,\n    style: [{\n      color: color,\n      fontWeight: '500'\n    }, labelStyle],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }, label) : label({\n    color: color,\n    focused: focused\n  })))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden'\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32\n  }\n});","map":{"version":3,"sources":["/home/user/Documents/StandByAssist/frontend/node_modules/@react-navigation/drawer/src/views/DrawerItem.tsx"],"names":["React","useTheme","Color","TouchableItem","DrawerItem","props","colors","icon","label","labelStyle","focused","activeTintColor","primary","inactiveTintColor","text","alpha","rgb","string","activeBackgroundColor","inactiveBackgroundColor","style","onPress","rest","StyleSheet","flatten","borderRadius","color","backgroundColor","iconNode","size","styles","container","wrapper","marginLeft","marginVertical","fontWeight","create","marginHorizontal","overflow","flexDirection","alignItems","padding","marginRight"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TouchableItem from './TouchableItem';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    focused = false,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text)\n      .alpha(0.68)\n      .rgb()\n      .string(),\n    activeBackgroundColor = Color(activeTintColor)\n      .alpha(0.12)\n      .rgb()\n      .string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <TouchableItem\n        delayPressIn={0}\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityTraits={focused ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={focused ? ['selected'] : []}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </TouchableItem>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}